
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00002800  00002894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800130  00800130  00002964  2**0
                  ALLOC
  3 .stab         000026ac  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e9  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006539  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000066a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__vector_3>
      10:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__vector_6>
      1c:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_7>
      20:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__vector_8>
      24:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void theft_alert(void);				/* alert for a theft attempt for 1 min */
void timer_open_door(void);			/* timer callback function when opening / closing door */
void timer_theft_alert(void);		/* timer callback function when alerting for theft */


int main() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 choice;					/* user input */
	UART_ConfigType uart_config = {ONE_BIT, DISABLE, BIT_8};
     b5a:	ce 01       	movw	r24, r28
     b5c:	42 96       	adiw	r24, 0x12	; 18
     b5e:	9e 8b       	std	Y+22, r25	; 0x16
     b60:	8d 8b       	std	Y+21, r24	; 0x15
     b62:	ed e2       	ldi	r30, 0x2D	; 45
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	f8 8f       	std	Y+24, r31	; 0x18
     b68:	ef 8b       	std	Y+23, r30	; 0x17
     b6a:	f3 e0       	ldi	r31, 0x03	; 3
     b6c:	f9 8f       	std	Y+25, r31	; 0x19
     b6e:	ef 89       	ldd	r30, Y+23	; 0x17
     b70:	f8 8d       	ldd	r31, Y+24	; 0x18
     b72:	00 80       	ld	r0, Z
     b74:	8f 89       	ldd	r24, Y+23	; 0x17
     b76:	98 8d       	ldd	r25, Y+24	; 0x18
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	98 8f       	std	Y+24, r25	; 0x18
     b7c:	8f 8b       	std	Y+23, r24	; 0x17
     b7e:	ed 89       	ldd	r30, Y+21	; 0x15
     b80:	fe 89       	ldd	r31, Y+22	; 0x16
     b82:	00 82       	st	Z, r0
     b84:	8d 89       	ldd	r24, Y+21	; 0x15
     b86:	9e 89       	ldd	r25, Y+22	; 0x16
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9e 8b       	std	Y+22, r25	; 0x16
     b8c:	8d 8b       	std	Y+21, r24	; 0x15
     b8e:	99 8d       	ldd	r25, Y+25	; 0x19
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	99 8f       	std	Y+25, r25	; 0x19
     b94:	e9 8d       	ldd	r30, Y+25	; 0x19
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>

	SREG |= (1<<7);
     b9a:	af e5       	ldi	r26, 0x5F	; 95
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8c 93       	st	X, r24
	LCD_init();
     ba8:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_init>
	UART_init(&uart_config);
     bac:	ce 01       	movw	r24, r28
     bae:	42 96       	adiw	r24, 0x12	; 18
     bb0:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_init>
	new_password();					/* set up a new password at the beginning */
     bb4:	0e 94 81 06 	call	0xd02	; 0xd02 <new_password>

	while(1) {
		if (g_idle) {
     bb8:	80 91 24 01 	lds	r24, 0x0124
     bbc:	88 23       	and	r24, r24
     bbe:	e1 f3       	breq	.-8      	; 0xbb8 <main+0x72>
			LCD_clearScreen();
     bc0:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
			LCD_displayString("\'*\': Open Door");
     bc4:	80 e6       	ldi	r24, 0x60	; 96
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_displayString>
			LCD_displayStringAt(1, 0, "\'#\': Change Pass");
     bcc:	2f e6       	ldi	r18, 0x6F	; 111
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	a9 01       	movw	r20, r18
     bd6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
			choice = Keypad_getPressedKey();
     bda:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <Keypad_getPressedKey>
     bde:	89 8b       	std	Y+17, r24	; 0x11
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	aa ef       	ldi	r26, 0xFA	; 250
     be6:	b3 e4       	ldi	r27, 0x43	; 67
     be8:	8b 87       	std	Y+11, r24	; 0x0b
     bea:	9c 87       	std	Y+12, r25	; 0x0c
     bec:	ad 87       	std	Y+13, r26	; 0x0d
     bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	4a ef       	ldi	r20, 0xFA	; 250
     bfe:	54 e4       	ldi	r21, 0x44	; 68
     c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	98 87       	std	Y+8, r25	; 0x08
     c0c:	a9 87       	std	Y+9, r26	; 0x09
     c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c24:	88 23       	and	r24, r24
     c26:	2c f4       	brge	.+10     	; 0xc32 <main+0xec>
		__ticks = 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	3f c0       	rjmp	.+126    	; 0xcb0 <main+0x16a>
	else if (__tmp > 65535)
     c32:	6f 81       	ldd	r22, Y+7	; 0x07
     c34:	78 85       	ldd	r23, Y+8	; 0x08
     c36:	89 85       	ldd	r24, Y+9	; 0x09
     c38:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	4f e7       	ldi	r20, 0x7F	; 127
     c40:	57 e4       	ldi	r21, 0x47	; 71
     c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c46:	18 16       	cp	r1, r24
     c48:	4c f5       	brge	.+82     	; 0xc9c <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c50:	9e 85       	ldd	r25, Y+14	; 0x0e
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e2       	ldi	r20, 0x20	; 32
     c58:	51 e4       	ldi	r21, 0x41	; 65
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	bc 01       	movw	r22, r24
     c64:	cd 01       	movw	r24, r26
     c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	0f c0       	rjmp	.+30     	; 0xc92 <main+0x14c>
     c74:	88 ec       	ldi	r24, 0xC8	; 200
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <main+0x13a>
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	9e 83       	std	Y+6, r25	; 0x06
     c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	69 f7       	brne	.-38     	; 0xc74 <main+0x12e>
     c9a:	14 c0       	rjmp	.+40     	; 0xcc4 <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9c:	6f 81       	ldd	r22, Y+7	; 0x07
     c9e:	78 85       	ldd	r23, Y+8	; 0x08
     ca0:	89 85       	ldd	r24, Y+9	; 0x09
     ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <main+0x176>
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			
			if (choice == '*') {
     cc4:	89 89       	ldd	r24, Y+17	; 0x11
     cc6:	8a 32       	cpi	r24, 0x2A	; 42
     cc8:	61 f4       	brne	.+24     	; 0xce2 <main+0x19c>
				bool correct = check_password();
     cca:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <check_password>
     cce:	88 8b       	std	Y+16, r24	; 0x10
				if (correct)
     cd0:	88 89       	ldd	r24, Y+16	; 0x10
     cd2:	88 23       	and	r24, r24
     cd4:	19 f0       	breq	.+6      	; 0xcdc <main+0x196>
					open_door();
     cd6:	0e 94 4f 0a 	call	0x149e	; 0x149e <open_door>
     cda:	6e cf       	rjmp	.-292    	; 0xbb8 <main+0x72>
				else
					theft_alert();
     cdc:	0e 94 80 0a 	call	0x1500	; 0x1500 <theft_alert>
     ce0:	6b cf       	rjmp	.-298    	; 0xbb8 <main+0x72>
			}

			else if (choice == '#') {
     ce2:	89 89       	ldd	r24, Y+17	; 0x11
     ce4:	83 32       	cpi	r24, 0x23	; 35
     ce6:	09 f0       	breq	.+2      	; 0xcea <main+0x1a4>
     ce8:	67 cf       	rjmp	.-306    	; 0xbb8 <main+0x72>
				bool correct = check_password();
     cea:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <check_password>
     cee:	8f 87       	std	Y+15, r24	; 0x0f
				if (correct)
     cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf2:	88 23       	and	r24, r24
     cf4:	19 f0       	breq	.+6      	; 0xcfc <main+0x1b6>
					new_password();
     cf6:	0e 94 81 06 	call	0xd02	; 0xd02 <new_password>
     cfa:	5e cf       	rjmp	.-324    	; 0xbb8 <main+0x72>
				else
					theft_alert();
     cfc:	0e 94 80 0a 	call	0x1500	; 0x1500 <theft_alert>
     d00:	5b cf       	rjmp	.-330    	; 0xbb8 <main+0x72>

00000d02 <new_password>:
			}
		}
	}
}

void new_password(void) {
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	c0 54       	subi	r28, 0x40	; 64
     d10:	d0 40       	sbci	r29, 0x00	; 0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
	while(1) {
		uint8 i;
		uint8 pass[5];
		bool correct = CORRECT;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	8a af       	std	Y+58, r24	; 0x3a

		LCD_clearScreen();
     d20:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
		LCD_displayString("Enter New Pass:");
     d24:	80 e8       	ldi	r24, 0x80	; 128
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_displayString>
		LCD_moveCursorTo(1,0);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_moveCursorTo>
		for (i = 0; i < PASS_SIZE; i++) {
     d34:	1b ae       	std	Y+59, r1	; 0x3b
     d36:	84 c0       	rjmp	.+264    	; 0xe40 <new_password+0x13e>
			pass[i] = Keypad_getPressedKey();
     d38:	8b ad       	ldd	r24, Y+59	; 0x3b
     d3a:	08 2f       	mov	r16, r24
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <Keypad_getPressedKey>
     d42:	28 2f       	mov	r18, r24
     d44:	ce 01       	movw	r24, r28
     d46:	cc 96       	adiw	r24, 0x3c	; 60
     d48:	fc 01       	movw	r30, r24
     d4a:	e0 0f       	add	r30, r16
     d4c:	f1 1f       	adc	r31, r17
     d4e:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
     d50:	8a e2       	ldi	r24, 0x2A	; 42
     d52:	0e 94 af 0b 	call	0x175e	; 0x175e <LCD_displayCharacter>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	aa ef       	ldi	r26, 0xFA	; 250
     d5c:	b3 e4       	ldi	r27, 0x43	; 67
     d5e:	8d ab       	std	Y+53, r24	; 0x35
     d60:	9e ab       	std	Y+54, r25	; 0x36
     d62:	af ab       	std	Y+55, r26	; 0x37
     d64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d66:	6d a9       	ldd	r22, Y+53	; 0x35
     d68:	7e a9       	ldd	r23, Y+54	; 0x36
     d6a:	8f a9       	ldd	r24, Y+55	; 0x37
     d6c:	98 ad       	ldd	r25, Y+56	; 0x38
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a ef       	ldi	r20, 0xFA	; 250
     d74:	54 e4       	ldi	r21, 0x44	; 68
     d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	89 ab       	std	Y+49, r24	; 0x31
     d80:	9a ab       	std	Y+50, r25	; 0x32
     d82:	ab ab       	std	Y+51, r26	; 0x33
     d84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d86:	69 a9       	ldd	r22, Y+49	; 0x31
     d88:	7a a9       	ldd	r23, Y+50	; 0x32
     d8a:	8b a9       	ldd	r24, Y+51	; 0x33
     d8c:	9c a9       	ldd	r25, Y+52	; 0x34
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9a:	88 23       	and	r24, r24
     d9c:	2c f4       	brge	.+10     	; 0xda8 <new_password+0xa6>
		__ticks = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	98 ab       	std	Y+48, r25	; 0x30
     da4:	8f a7       	std	Y+47, r24	; 0x2f
     da6:	3f c0       	rjmp	.+126    	; 0xe26 <new_password+0x124>
	else if (__tmp > 65535)
     da8:	69 a9       	ldd	r22, Y+49	; 0x31
     daa:	7a a9       	ldd	r23, Y+50	; 0x32
     dac:	8b a9       	ldd	r24, Y+51	; 0x33
     dae:	9c a9       	ldd	r25, Y+52	; 0x34
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	4c f5       	brge	.+82     	; 0xe12 <new_password+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc0:	6d a9       	ldd	r22, Y+53	; 0x35
     dc2:	7e a9       	ldd	r23, Y+54	; 0x36
     dc4:	8f a9       	ldd	r24, Y+55	; 0x37
     dc6:	98 ad       	ldd	r25, Y+56	; 0x38
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	51 e4       	ldi	r21, 0x41	; 65
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <new_password+0x106>
     dea:	88 ec       	ldi	r24, 0xC8	; 200
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9e a7       	std	Y+46, r25	; 0x2e
     df0:	8d a7       	std	Y+45, r24	; 0x2d
     df2:	8d a5       	ldd	r24, Y+45	; 0x2d
     df4:	9e a5       	ldd	r25, Y+46	; 0x2e
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <new_password+0xf4>
     dfa:	9e a7       	std	Y+46, r25	; 0x2e
     dfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	8f a5       	ldd	r24, Y+47	; 0x2f
     e00:	98 a9       	ldd	r25, Y+48	; 0x30
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	98 ab       	std	Y+48, r25	; 0x30
     e06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	8f a5       	ldd	r24, Y+47	; 0x2f
     e0a:	98 a9       	ldd	r25, Y+48	; 0x30
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f7       	brne	.-38     	; 0xdea <new_password+0xe8>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <new_password+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e12:	69 a9       	ldd	r22, Y+49	; 0x31
     e14:	7a a9       	ldd	r23, Y+50	; 0x32
     e16:	8b a9       	ldd	r24, Y+51	; 0x33
     e18:	9c a9       	ldd	r25, Y+52	; 0x34
     e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	98 ab       	std	Y+48, r25	; 0x30
     e24:	8f a7       	std	Y+47, r24	; 0x2f
     e26:	8f a5       	ldd	r24, Y+47	; 0x2f
     e28:	98 a9       	ldd	r25, Y+48	; 0x30
     e2a:	9c a7       	std	Y+44, r25	; 0x2c
     e2c:	8b a7       	std	Y+43, r24	; 0x2b
     e2e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e30:	9c a5       	ldd	r25, Y+44	; 0x2c
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <new_password+0x130>
     e36:	9c a7       	std	Y+44, r25	; 0x2c
     e38:	8b a7       	std	Y+43, r24	; 0x2b
		bool correct = CORRECT;

		LCD_clearScreen();
		LCD_displayString("Enter New Pass:");
		LCD_moveCursorTo(1,0);
		for (i = 0; i < PASS_SIZE; i++) {
     e3a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	8b af       	std	Y+59, r24	; 0x3b
     e40:	8b ad       	ldd	r24, Y+59	; 0x3b
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	08 f4       	brcc	.+2      	; 0xe48 <new_password+0x146>
     e46:	78 cf       	rjmp	.-272    	; 0xd38 <new_password+0x36>
			pass[i] = Keypad_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}

		LCD_clearScreen();
     e48:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
		LCD_displayString("Confirm Pass:");
     e4c:	80 e9       	ldi	r24, 0x90	; 144
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_displayString>
		LCD_moveCursorTo(1,0);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_moveCursorTo>
		for (i = 0; i < PASS_SIZE; i++) {
     e5c:	1b ae       	std	Y+59, r1	; 0x3b
     e5e:	88 c0       	rjmp	.+272    	; 0xf70 <new_password+0x26e>
			uint8 digit = Keypad_getPressedKey();
     e60:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <Keypad_getPressedKey>
     e64:	89 af       	std	Y+57, r24	; 0x39
			LCD_displayCharacter('*');
     e66:	8a e2       	ldi	r24, 0x2A	; 42
     e68:	0e 94 af 0b 	call	0x175e	; 0x175e <LCD_displayCharacter>
			if (pass[i] != digit)
     e6c:	8b ad       	ldd	r24, Y+59	; 0x3b
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	ce 01       	movw	r24, r28
     e74:	cc 96       	adiw	r24, 0x3c	; 60
     e76:	fc 01       	movw	r30, r24
     e78:	e2 0f       	add	r30, r18
     e7a:	f3 1f       	adc	r31, r19
     e7c:	90 81       	ld	r25, Z
     e7e:	89 ad       	ldd	r24, Y+57	; 0x39
     e80:	98 17       	cp	r25, r24
     e82:	09 f0       	breq	.+2      	; 0xe86 <new_password+0x184>
				correct = WRONG;
     e84:	1a ae       	std	Y+58, r1	; 0x3a
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	aa ef       	ldi	r26, 0xFA	; 250
     e8c:	b3 e4       	ldi	r27, 0x43	; 67
     e8e:	8f a3       	std	Y+39, r24	; 0x27
     e90:	98 a7       	std	Y+40, r25	; 0x28
     e92:	a9 a7       	std	Y+41, r26	; 0x29
     e94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e96:	6f a1       	ldd	r22, Y+39	; 0x27
     e98:	78 a5       	ldd	r23, Y+40	; 0x28
     e9a:	89 a5       	ldd	r24, Y+41	; 0x29
     e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a ef       	ldi	r20, 0xFA	; 250
     ea4:	54 e4       	ldi	r21, 0x44	; 68
     ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	8b a3       	std	Y+35, r24	; 0x23
     eb0:	9c a3       	std	Y+36, r25	; 0x24
     eb2:	ad a3       	std	Y+37, r26	; 0x25
     eb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eb6:	6b a1       	ldd	r22, Y+35	; 0x23
     eb8:	7c a1       	ldd	r23, Y+36	; 0x24
     eba:	8d a1       	ldd	r24, Y+37	; 0x25
     ebc:	9e a1       	ldd	r25, Y+38	; 0x26
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	5f e3       	ldi	r21, 0x3F	; 63
     ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eca:	88 23       	and	r24, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <new_password+0x1d6>
		__ticks = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9a a3       	std	Y+34, r25	; 0x22
     ed4:	89 a3       	std	Y+33, r24	; 0x21
     ed6:	3f c0       	rjmp	.+126    	; 0xf56 <new_password+0x254>
	else if (__tmp > 65535)
     ed8:	6b a1       	ldd	r22, Y+35	; 0x23
     eda:	7c a1       	ldd	r23, Y+36	; 0x24
     edc:	8d a1       	ldd	r24, Y+37	; 0x25
     ede:	9e a1       	ldd	r25, Y+38	; 0x26
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	3f ef       	ldi	r19, 0xFF	; 255
     ee4:	4f e7       	ldi	r20, 0x7F	; 127
     ee6:	57 e4       	ldi	r21, 0x47	; 71
     ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eec:	18 16       	cp	r1, r24
     eee:	4c f5       	brge	.+82     	; 0xf42 <new_password+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef0:	6f a1       	ldd	r22, Y+39	; 0x27
     ef2:	78 a5       	ldd	r23, Y+40	; 0x28
     ef4:	89 a5       	ldd	r24, Y+41	; 0x29
     ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e2       	ldi	r20, 0x20	; 32
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	9a a3       	std	Y+34, r25	; 0x22
     f16:	89 a3       	std	Y+33, r24	; 0x21
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <new_password+0x236>
     f1a:	88 ec       	ldi	r24, 0xC8	; 200
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	98 a3       	std	Y+32, r25	; 0x20
     f20:	8f 8f       	std	Y+31, r24	; 0x1f
     f22:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f24:	98 a1       	ldd	r25, Y+32	; 0x20
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <new_password+0x224>
     f2a:	98 a3       	std	Y+32, r25	; 0x20
     f2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2e:	89 a1       	ldd	r24, Y+33	; 0x21
     f30:	9a a1       	ldd	r25, Y+34	; 0x22
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	9a a3       	std	Y+34, r25	; 0x22
     f36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f38:	89 a1       	ldd	r24, Y+33	; 0x21
     f3a:	9a a1       	ldd	r25, Y+34	; 0x22
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	69 f7       	brne	.-38     	; 0xf1a <new_password+0x218>
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <new_password+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f42:	6b a1       	ldd	r22, Y+35	; 0x23
     f44:	7c a1       	ldd	r23, Y+36	; 0x24
     f46:	8d a1       	ldd	r24, Y+37	; 0x25
     f48:	9e a1       	ldd	r25, Y+38	; 0x26
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	9a a3       	std	Y+34, r25	; 0x22
     f54:	89 a3       	std	Y+33, r24	; 0x21
     f56:	89 a1       	ldd	r24, Y+33	; 0x21
     f58:	9a a1       	ldd	r25, Y+34	; 0x22
     f5a:	9e 8f       	std	Y+30, r25	; 0x1e
     f5c:	8d 8f       	std	Y+29, r24	; 0x1d
     f5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <new_password+0x260>
     f66:	9e 8f       	std	Y+30, r25	; 0x1e
     f68:	8d 8f       	std	Y+29, r24	; 0x1d
		}

		LCD_clearScreen();
		LCD_displayString("Confirm Pass:");
		LCD_moveCursorTo(1,0);
		for (i = 0; i < PASS_SIZE; i++) {
     f6a:	8b ad       	ldd	r24, Y+59	; 0x3b
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	8b af       	std	Y+59, r24	; 0x3b
     f70:	8b ad       	ldd	r24, Y+59	; 0x3b
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	08 f4       	brcc	.+2      	; 0xf78 <new_password+0x276>
     f76:	74 cf       	rjmp	.-280    	; 0xe60 <new_password+0x15e>
			if (pass[i] != digit)
				correct = WRONG;
			_delay_ms(500);
		}

		if (correct) {
     f78:	8a ad       	ldd	r24, Y+58	; 0x3a
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <new_password+0x27e>
     f7e:	9d c0       	rjmp	.+314    	; 0x10ba <new_password+0x3b8>
			UART_sendByte(NEW_PASS);
     f80:	89 e2       	ldi	r24, 0x29	; 41
     f82:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
			while (UART_receiveByte() != CONTROL_READY);
     f86:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
     f8a:	80 3c       	cpi	r24, 0xC0	; 192
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <new_password+0x284>
			for (i = 0; i < PASS_SIZE; ++i)
     f8e:	1b ae       	std	Y+59, r1	; 0x3b
     f90:	0e c0       	rjmp	.+28     	; 0xfae <new_password+0x2ac>
				UART_sendByte(pass[i]);
     f92:	8b ad       	ldd	r24, Y+59	; 0x3b
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	ce 01       	movw	r24, r28
     f9a:	cc 96       	adiw	r24, 0x3c	; 60
     f9c:	fc 01       	movw	r30, r24
     f9e:	e2 0f       	add	r30, r18
     fa0:	f3 1f       	adc	r31, r19
     fa2:	80 81       	ld	r24, Z
     fa4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
		}

		if (correct) {
			UART_sendByte(NEW_PASS);
			while (UART_receiveByte() != CONTROL_READY);
			for (i = 0; i < PASS_SIZE; ++i)
     fa8:	8b ad       	ldd	r24, Y+59	; 0x3b
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	8b af       	std	Y+59, r24	; 0x3b
     fae:	8b ad       	ldd	r24, Y+59	; 0x3b
     fb0:	85 30       	cpi	r24, 0x05	; 5
     fb2:	78 f3       	brcs	.-34     	; 0xf92 <new_password+0x290>
				UART_sendByte(pass[i]);
			LCD_clearScreen();
     fb4:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
			LCD_displayStringAt(0, 2, "New password");
     fb8:	2e e9       	ldi	r18, 0x9E	; 158
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	62 e0       	ldi	r22, 0x02	; 2
     fc0:	a9 01       	movw	r20, r18
     fc2:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
			LCD_displayStringAt(1, 4, "is saved");
     fc6:	2b ea       	ldi	r18, 0xAB	; 171
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	64 e0       	ldi	r22, 0x04	; 4
     fce:	a9 01       	movw	r20, r18
     fd0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	aa ef       	ldi	r26, 0xFA	; 250
     fda:	b4 e4       	ldi	r27, 0x44	; 68
     fdc:	89 8f       	std	Y+25, r24	; 0x19
     fde:	9a 8f       	std	Y+26, r25	; 0x1a
     fe0:	ab 8f       	std	Y+27, r26	; 0x1b
     fe2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	69 8d       	ldd	r22, Y+25	; 0x19
     fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8d 8b       	std	Y+21, r24	; 0x15
     ffe:	9e 8b       	std	Y+22, r25	; 0x16
    1000:	af 8b       	std	Y+23, r26	; 0x17
    1002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1004:	6d 89       	ldd	r22, Y+21	; 0x15
    1006:	7e 89       	ldd	r23, Y+22	; 0x16
    1008:	8f 89       	ldd	r24, Y+23	; 0x17
    100a:	98 8d       	ldd	r25, Y+24	; 0x18
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <new_password+0x324>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9c 8b       	std	Y+20, r25	; 0x14
    1022:	8b 8b       	std	Y+19, r24	; 0x13
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <new_password+0x3a2>
	else if (__tmp > 65535)
    1026:	6d 89       	ldd	r22, Y+21	; 0x15
    1028:	7e 89       	ldd	r23, Y+22	; 0x16
    102a:	8f 89       	ldd	r24, Y+23	; 0x17
    102c:	98 8d       	ldd	r25, Y+24	; 0x18
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <new_password+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	69 8d       	ldd	r22, Y+25	; 0x19
    1040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <new_password+0x384>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9a 8b       	std	Y+18, r25	; 0x12
    106e:	89 8b       	std	Y+17, r24	; 0x11
    1070:	89 89       	ldd	r24, Y+17	; 0x11
    1072:	9a 89       	ldd	r25, Y+18	; 0x12
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <new_password+0x372>
    1078:	9a 8b       	std	Y+18, r25	; 0x12
    107a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9c 8b       	std	Y+20, r25	; 0x14
    1084:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8b 89       	ldd	r24, Y+19	; 0x13
    1088:	9c 89       	ldd	r25, Y+20	; 0x14
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <new_password+0x366>
    108e:	98 c0       	rjmp	.+304    	; 0x11c0 <new_password+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6d 89       	ldd	r22, Y+21	; 0x15
    1092:	7e 89       	ldd	r23, Y+22	; 0x16
    1094:	8f 89       	ldd	r24, Y+23	; 0x17
    1096:	98 8d       	ldd	r25, Y+24	; 0x18
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9c 8b       	std	Y+20, r25	; 0x14
    10a2:	8b 8b       	std	Y+19, r24	; 0x13
    10a4:	8b 89       	ldd	r24, Y+19	; 0x13
    10a6:	9c 89       	ldd	r25, Y+20	; 0x14
    10a8:	98 8b       	std	Y+16, r25	; 0x10
    10aa:	8f 87       	std	Y+15, r24	; 0x0f
    10ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ae:	98 89       	ldd	r25, Y+16	; 0x10
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <new_password+0x3ae>
    10b4:	98 8b       	std	Y+16, r25	; 0x10
    10b6:	8f 87       	std	Y+15, r24	; 0x0f
    10b8:	83 c0       	rjmp	.+262    	; 0x11c0 <new_password+0x4be>
			_delay_ms(2000);
			return;
		}

		else {
			LCD_clearScreen();
    10ba:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
			LCD_displayStringAt(0, 3, "Passwords");
    10be:	24 eb       	ldi	r18, 0xB4	; 180
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	63 e0       	ldi	r22, 0x03	; 3
    10c6:	a9 01       	movw	r20, r18
    10c8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
			LCD_displayStringAt(1, 2, "don\'t match");
    10cc:	2e eb       	ldi	r18, 0xBE	; 190
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	62 e0       	ldi	r22, 0x02	; 2
    10d4:	a9 01       	movw	r20, r18
    10d6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	aa ef       	ldi	r26, 0xFA	; 250
    10e0:	b4 e4       	ldi	r27, 0x44	; 68
    10e2:	8b 87       	std	Y+11, r24	; 0x0b
    10e4:	9c 87       	std	Y+12, r25	; 0x0c
    10e6:	ad 87       	std	Y+13, r26	; 0x0d
    10e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a ef       	ldi	r20, 0xFA	; 250
    10f8:	54 e4       	ldi	r21, 0x44	; 68
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8f 83       	std	Y+7, r24	; 0x07
    1104:	98 87       	std	Y+8, r25	; 0x08
    1106:	a9 87       	std	Y+9, r26	; 0x09
    1108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <new_password+0x42a>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <new_password+0x4a8>
	else if (__tmp > 65535)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <new_password+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6b 85       	ldd	r22, Y+11	; 0x0b
    1146:	7c 85       	ldd	r23, Y+12	; 0x0c
    1148:	8d 85       	ldd	r24, Y+13	; 0x0d
    114a:	9e 85       	ldd	r25, Y+14	; 0x0e
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	0f c0       	rjmp	.+30     	; 0x118c <new_password+0x48a>
    116e:	88 ec       	ldi	r24, 0xC8	; 200
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <new_password+0x478>
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <new_password+0x46c>
    1194:	c3 cd       	rjmp	.-1146   	; 0xd1c <new_password+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <new_password+0x4b4>
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	ae cd       	rjmp	.-1188   	; 0xd1c <new_password+0x1a>
			_delay_ms(2000);
		}
	}
}
    11c0:	c0 5c       	subi	r28, 0xC0	; 192
    11c2:	df 4f       	sbci	r29, 0xFF	; 255
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	08 95       	ret

000011d8 <check_password>:

bool check_password(void) {
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	a6 97       	sbiw	r28, 0x26	; 38
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 attempt;
	uint8 pass[5];
	UART_sendByte(GET_PASS);
    11f0:	89 e6       	ldi	r24, 0x69	; 105
    11f2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY);
    11f6:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
    11fa:	80 3c       	cpi	r24, 0xC0	; 192
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <check_password+0x1e>
	for (i = 0; i < PASS_SIZE; i++)
    11fe:	18 a2       	std	Y+32, r1	; 0x20
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <check_password+0x48>
		pass[i] = UART_receiveByte();
    1202:	88 a1       	ldd	r24, Y+32	; 0x20
    1204:	08 2f       	mov	r16, r24
    1206:	10 e0       	ldi	r17, 0x00	; 0
    1208:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
    120c:	28 2f       	mov	r18, r24
    120e:	ce 01       	movw	r24, r28
    1210:	81 96       	adiw	r24, 0x21	; 33
    1212:	fc 01       	movw	r30, r24
    1214:	e0 0f       	add	r30, r16
    1216:	f1 1f       	adc	r31, r17
    1218:	20 83       	st	Z, r18
	uint8 i;
	uint8 attempt;
	uint8 pass[5];
	UART_sendByte(GET_PASS);
	while (UART_receiveByte() != CONTROL_READY);
	for (i = 0; i < PASS_SIZE; i++)
    121a:	88 a1       	ldd	r24, Y+32	; 0x20
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	88 a3       	std	Y+32, r24	; 0x20
    1220:	88 a1       	ldd	r24, Y+32	; 0x20
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	70 f3       	brcs	.-36     	; 0x1202 <check_password+0x2a>
		pass[i] = UART_receiveByte();

	for (attempt = 0; attempt < WRONG_ATTEMPTS; attempt++) {
    1226:	1f 8e       	std	Y+31, r1	; 0x1f
    1228:	29 c1       	rjmp	.+594    	; 0x147c <check_password+0x2a4>
		bool correct = CORRECT;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_clearScreen();
    122e:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
		LCD_displayString("Enter your pass:");
    1232:	8a ec       	ldi	r24, 0xCA	; 202
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_displayString>
		LCD_moveCursorTo(1,0);
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_moveCursorTo>
		for (i = 0; i < PASS_SIZE; i++) {
    1242:	18 a2       	std	Y+32, r1	; 0x20
    1244:	88 c0       	rjmp	.+272    	; 0x1356 <check_password+0x17e>
			uint8 digit = Keypad_getPressedKey();
    1246:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <Keypad_getPressedKey>
    124a:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_displayCharacter('*');
    124c:	8a e2       	ldi	r24, 0x2A	; 42
    124e:	0e 94 af 0b 	call	0x175e	; 0x175e <LCD_displayCharacter>
			if (pass[i] != digit)
    1252:	88 a1       	ldd	r24, Y+32	; 0x20
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	ce 01       	movw	r24, r28
    125a:	81 96       	adiw	r24, 0x21	; 33
    125c:	fc 01       	movw	r30, r24
    125e:	e2 0f       	add	r30, r18
    1260:	f3 1f       	adc	r31, r19
    1262:	90 81       	ld	r25, Z
    1264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1266:	98 17       	cp	r25, r24
    1268:	09 f0       	breq	.+2      	; 0x126c <check_password+0x94>
				correct = WRONG;
    126a:	1e 8e       	std	Y+30, r1	; 0x1e
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	aa ef       	ldi	r26, 0xFA	; 250
    1272:	b3 e4       	ldi	r27, 0x43	; 67
    1274:	89 8f       	std	Y+25, r24	; 0x19
    1276:	9a 8f       	std	Y+26, r25	; 0x1a
    1278:	ab 8f       	std	Y+27, r26	; 0x1b
    127a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	69 8d       	ldd	r22, Y+25	; 0x19
    127e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a ef       	ldi	r20, 0xFA	; 250
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8d 8b       	std	Y+21, r24	; 0x15
    1296:	9e 8b       	std	Y+22, r25	; 0x16
    1298:	af 8b       	std	Y+23, r26	; 0x17
    129a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <check_password+0xe6>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <check_password+0x164>
	else if (__tmp > 65535)
    12be:	6d 89       	ldd	r22, Y+21	; 0x15
    12c0:	7e 89       	ldd	r23, Y+22	; 0x16
    12c2:	8f 89       	ldd	r24, Y+23	; 0x17
    12c4:	98 8d       	ldd	r25, Y+24	; 0x18
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <check_password+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	69 8d       	ldd	r22, Y+25	; 0x19
    12d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9c 8b       	std	Y+20, r25	; 0x14
    12fc:	8b 8b       	std	Y+19, r24	; 0x13
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <check_password+0x146>
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9a 8b       	std	Y+18, r25	; 0x12
    1306:	89 8b       	std	Y+17, r24	; 0x11
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	9a 89       	ldd	r25, Y+18	; 0x12
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <check_password+0x134>
    1310:	9a 8b       	std	Y+18, r25	; 0x12
    1312:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8b 89       	ldd	r24, Y+19	; 0x13
    1316:	9c 89       	ldd	r25, Y+20	; 0x14
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8b 89       	ldd	r24, Y+19	; 0x13
    1320:	9c 89       	ldd	r25, Y+20	; 0x14
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <check_password+0x128>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <check_password+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6d 89       	ldd	r22, Y+21	; 0x15
    132a:	7e 89       	ldd	r23, Y+22	; 0x16
    132c:	8f 89       	ldd	r24, Y+23	; 0x17
    132e:	98 8d       	ldd	r25, Y+24	; 0x18
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9c 8b       	std	Y+20, r25	; 0x14
    133a:	8b 8b       	std	Y+19, r24	; 0x13
    133c:	8b 89       	ldd	r24, Y+19	; 0x13
    133e:	9c 89       	ldd	r25, Y+20	; 0x14
    1340:	98 8b       	std	Y+16, r25	; 0x10
    1342:	8f 87       	std	Y+15, r24	; 0x0f
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	98 89       	ldd	r25, Y+16	; 0x10
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <check_password+0x170>
    134c:	98 8b       	std	Y+16, r25	; 0x10
    134e:	8f 87       	std	Y+15, r24	; 0x0f
	for (attempt = 0; attempt < WRONG_ATTEMPTS; attempt++) {
		bool correct = CORRECT;
		LCD_clearScreen();
		LCD_displayString("Enter your pass:");
		LCD_moveCursorTo(1,0);
		for (i = 0; i < PASS_SIZE; i++) {
    1350:	88 a1       	ldd	r24, Y+32	; 0x20
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	88 a3       	std	Y+32, r24	; 0x20
    1356:	88 a1       	ldd	r24, Y+32	; 0x20
    1358:	85 30       	cpi	r24, 0x05	; 5
    135a:	08 f4       	brcc	.+2      	; 0x135e <check_password+0x186>
    135c:	74 cf       	rjmp	.-280    	; 0x1246 <check_password+0x6e>
			if (pass[i] != digit)
				correct = WRONG;
			_delay_ms(500);
		}

		if (correct)
    135e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1360:	88 23       	and	r24, r24
    1362:	19 f0       	breq	.+6      	; 0x136a <check_password+0x192>
			return CORRECT;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	8e a3       	std	Y+38, r24	; 0x26
    1368:	8e c0       	rjmp	.+284    	; 0x1486 <check_password+0x2ae>

		else if (attempt < (WRONG_ATTEMPTS - 1)) {
    136a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	08 f0       	brcs	.+2      	; 0x1372 <check_password+0x19a>
    1370:	82 c0       	rjmp	.+260    	; 0x1476 <check_password+0x29e>
			LCD_clearScreen();
    1372:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
			LCD_displayStringAt(0, 3, "WRONG PASS");
    1376:	2b ed       	ldi	r18, 0xDB	; 219
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	a9 01       	movw	r20, r18
    1380:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
			LCD_displayStringAt(1, 3, "TRY AGAIN!");
    1384:	26 ee       	ldi	r18, 0xE6	; 230
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	63 e0       	ldi	r22, 0x03	; 3
    138c:	a9 01       	movw	r20, r18
    138e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	aa ef       	ldi	r26, 0xFA	; 250
    1398:	b4 e4       	ldi	r27, 0x44	; 68
    139a:	8b 87       	std	Y+11, r24	; 0x0b
    139c:	9c 87       	std	Y+12, r25	; 0x0c
    139e:	ad 87       	std	Y+13, r26	; 0x0d
    13a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4a ef       	ldi	r20, 0xFA	; 250
    13b0:	54 e4       	ldi	r21, 0x44	; 68
    13b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	8f 83       	std	Y+7, r24	; 0x07
    13bc:	98 87       	std	Y+8, r25	; 0x08
    13be:	a9 87       	std	Y+9, r26	; 0x09
    13c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c2:	6f 81       	ldd	r22, Y+7	; 0x07
    13c4:	78 85       	ldd	r23, Y+8	; 0x08
    13c6:	89 85       	ldd	r24, Y+9	; 0x09
    13c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <check_password+0x20c>
		__ticks = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	3f c0       	rjmp	.+126    	; 0x1462 <check_password+0x28a>
	else if (__tmp > 65535)
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f e7       	ldi	r20, 0x7F	; 127
    13f2:	57 e4       	ldi	r21, 0x47	; 71
    13f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f8:	18 16       	cp	r1, r24
    13fa:	4c f5       	brge	.+82     	; 0x144e <check_password+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	9e 85       	ldd	r25, Y+14	; 0x0e
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <check_password+0x26c>
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9c 83       	std	Y+4, r25	; 0x04
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <check_password+0x25a>
    1436:	9c 83       	std	Y+4, r25	; 0x04
    1438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	69 f7       	brne	.-38     	; 0x1426 <check_password+0x24e>
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <check_password+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144e:	6f 81       	ldd	r22, Y+7	; 0x07
    1450:	78 85       	ldd	r23, Y+8	; 0x08
    1452:	89 85       	ldd	r24, Y+9	; 0x09
    1454:	9a 85       	ldd	r25, Y+10	; 0x0a
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <check_password+0x296>
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(GET_PASS);
	while (UART_receiveByte() != CONTROL_READY);
	for (i = 0; i < PASS_SIZE; i++)
		pass[i] = UART_receiveByte();

	for (attempt = 0; attempt < WRONG_ATTEMPTS; attempt++) {
    1476:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1478:	8f 5f       	subi	r24, 0xFF	; 255
    147a:	8f 8f       	std	Y+31, r24	; 0x1f
    147c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	08 f4       	brcc	.+2      	; 0x1484 <check_password+0x2ac>
    1482:	d3 ce       	rjmp	.-602    	; 0x122a <check_password+0x52>
			LCD_displayStringAt(0, 3, "WRONG PASS");
			LCD_displayStringAt(1, 3, "TRY AGAIN!");
			_delay_ms(2000);
		}
	}
	return WRONG;
    1484:	1e a2       	std	Y+38, r1	; 0x26
    1486:	8e a1       	ldd	r24, Y+38	; 0x26
}
    1488:	a6 96       	adiw	r28, 0x26	; 38
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <open_door>:

void open_door(void) {
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(OPEN_DOOR);
    14a6:	8d e0       	ldi	r24, 0x0D	; 13
    14a8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY);
    14ac:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
    14b0:	80 3c       	cpi	r24, 0xC0	; 192
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <open_door+0xe>
	timer1a_config.initial_value = 41875;
    14b4:	83 e9       	ldi	r24, 0x93	; 147
    14b6:	93 ea       	ldi	r25, 0xA3	; 163
    14b8:	90 93 2a 01 	sts	0x012A, r25
    14bc:	80 93 29 01 	sts	0x0129, r24
	TIMERS_setCallBack(TIMER1A, CTC_OCR1A, timer_open_door);
    14c0:	2a ea       	ldi	r18, 0xAA	; 170
    14c2:	3a e0       	ldi	r19, 0x0A	; 10
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	64 e0       	ldi	r22, 0x04	; 4
    14c8:	a9 01       	movw	r20, r18
    14ca:	0e 94 30 12 	call	0x2460	; 0x2460 <TIMERS_setCallBack>
	TIMERS_init(&timer1a_config);
    14ce:	85 e2       	ldi	r24, 0x25	; 37
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <TIMERS_init>

	g_idle = 0;
    14d6:	10 92 24 01 	sts	0x0124, r1
	LCD_clearScreen();
    14da:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
	LCD_displayStringAt(0, 4, "Door is");
    14de:	21 ef       	ldi	r18, 0xF1	; 241
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	64 e0       	ldi	r22, 0x04	; 4
    14e6:	a9 01       	movw	r20, r18
    14e8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
	LCD_displayStringAt(1, 3, "opening...");
    14ec:	29 ef       	ldi	r18, 0xF9	; 249
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	63 e0       	ldi	r22, 0x03	; 3
    14f4:	a9 01       	movw	r20, r18
    14f6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
}
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <theft_alert>:

void theft_alert(void) {
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(THEFT_ALERT);
    1508:	8a e7       	ldi	r24, 0x7A	; 122
    150a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY);
    150e:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
    1512:	80 3c       	cpi	r24, 0xC0	; 192
    1514:	e1 f7       	brne	.-8      	; 0x150e <theft_alert+0xe>
	timer1a_config.initial_value = 11250;
    1516:	82 ef       	ldi	r24, 0xF2	; 242
    1518:	9b e2       	ldi	r25, 0x2B	; 43
    151a:	90 93 2a 01 	sts	0x012A, r25
    151e:	80 93 29 01 	sts	0x0129, r24
	TIMERS_setCallBack(TIMER1A, CTC_OCR1A, timer_theft_alert);
    1522:	2d ed       	ldi	r18, 0xDD	; 221
    1524:	3a e0       	ldi	r19, 0x0A	; 10
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	64 e0       	ldi	r22, 0x04	; 4
    152a:	a9 01       	movw	r20, r18
    152c:	0e 94 30 12 	call	0x2460	; 0x2460 <TIMERS_setCallBack>
	TIMERS_init(&timer1a_config);
    1530:	85 e2       	ldi	r24, 0x25	; 37
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <TIMERS_init>

	g_idle = 0;
    1538:	10 92 24 01 	sts	0x0124, r1
	LCD_clearScreen();
    153c:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
	LCD_displayStringAt(0, 2, "7araaaamyyyy");
    1540:	24 e0       	ldi	r18, 0x04	; 4
    1542:	31 e0       	ldi	r19, 0x01	; 1
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	a9 01       	movw	r20, r18
    154a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
}
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <timer_open_door>:

void timer_open_door(void) {
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    155c:	80 91 30 01 	lds	r24, 0x0130
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	80 93 30 01 	sts	0x0130, r24
	if (g_ticks == 2) {
    1566:	80 91 30 01 	lds	r24, 0x0130
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	b9 f4       	brne	.+46     	; 0x159c <timer_open_door+0x48>
		TCNT1 = 41875;
    156e:	ec e4       	ldi	r30, 0x4C	; 76
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	83 e9       	ldi	r24, 0x93	; 147
    1574:	93 ea       	ldi	r25, 0xA3	; 163
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
		LCD_clearScreen();
    157a:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
		LCD_displayStringAt(0, 4, "Door is");
    157e:	21 ef       	ldi	r18, 0xF1	; 241
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	64 e0       	ldi	r22, 0x04	; 4
    1586:	a9 01       	movw	r20, r18
    1588:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
		LCD_displayStringAt(1, 3, "closing...");
    158c:	21 e1       	ldi	r18, 0x11	; 17
    158e:	31 e0       	ldi	r19, 0x01	; 1
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	63 e0       	ldi	r22, 0x03	; 3
    1594:	a9 01       	movw	r20, r18
    1596:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_displayStringAt>
    159a:	0c c0       	rjmp	.+24     	; 0x15b4 <timer_open_door+0x60>
	}
	else if (g_ticks == 4) {
    159c:	80 91 30 01 	lds	r24, 0x0130
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	41 f4       	brne	.+16     	; 0x15b4 <timer_open_door+0x60>
		g_idle = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 24 01 	sts	0x0124, r24
		g_ticks = 0;
    15aa:	10 92 30 01 	sts	0x0130, r1
		TIMERS_deInit(TIMER1A);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	0e 94 8a 12 	call	0x2514	; 0x2514 <TIMERS_deInit>
	}
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <timer_theft_alert>:

void timer_theft_alert(void) {
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    15c2:	80 91 30 01 	lds	r24, 0x0130
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	80 93 30 01 	sts	0x0130, r24
	if (g_ticks == 8) {
    15cc:	80 91 30 01 	lds	r24, 0x0130
    15d0:	88 30       	cpi	r24, 0x08	; 8
    15d2:	41 f4       	brne	.+16     	; 0x15e4 <timer_theft_alert+0x2a>
		g_idle = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 24 01 	sts	0x0124, r24
		g_ticks = 0;
    15da:	10 92 30 01 	sts	0x0130, r1
		TIMERS_deInit(TIMER1A);
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	0e 94 8a 12 	call	0x2514	; 0x2514 <TIMERS_deInit>
	}
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <Keypad_getPressedKey>:
static uint8 Keypad_4x3_adjustKeyNumber(uint8 button_number);
#elif (N_COL == 4)
static uint8 Keypad_4x4_adjustKeyNumber(uint8 button_number);
#endif

uint8 Keypad_getPressedKey(void) {
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <Keypad_getPressedKey+0x6>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row;
	/* loop until a key is pressed */
	while(1) {
		/* loop for columns */
		for (col = 0; col < N_COL; col++) {
    15f4:	1a 82       	std	Y+2, r1	; 0x02
    15f6:	4d c0       	rjmp	.+154    	; 0x1692 <Keypad_getPressedKey+0xa8>
			/* each time only one of the column pins will be output and
			 * the rest will be input pins including the row pins */
			KEYPAD_PORT_DIR = 0b00010000 << col;
    15f8:	e7 e3       	ldi	r30, 0x37	; 55
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	80 e1       	ldi	r24, 0x10	; 16
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <Keypad_getPressedKey+0x22>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	2a 95       	dec	r18
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <Keypad_getPressedKey+0x1e>
    1610:	80 83       	st	Z, r24
			
			/* clear the output column pin and
			 * enable the internal pull up resistors for the rows pins*/
			KEYPAD_PORT_OUT = ~(0b00010000 << col);
    1612:	e8 e3       	ldi	r30, 0x38	; 56
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	80 e1       	ldi	r24, 0x10	; 16
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <Keypad_getPressedKey+0x3e>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <Keypad_getPressedKey+0x3a>
    162c:	80 95       	com	r24
    162e:	80 83       	st	Z, r24

			/* loop for rows */
			for (row = 0; row < N_ROW; row++) {
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	29 c0       	rjmp	.+82     	; 0x1686 <Keypad_getPressedKey+0x9c>
				/* if the switch is pressed in this row */
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) {
    1634:	e6 e3       	ldi	r30, 0x36	; 54
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <Keypad_getPressedKey+0x62>
    1648:	55 95       	asr	r21
    164a:	47 95       	ror	r20
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <Keypad_getPressedKey+0x5e>
    1650:	ca 01       	movw	r24, r20
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	99 f4       	brne	.+38     	; 0x1680 <Keypad_getPressedKey+0x96>
					#if (N_COL == 3)
						return Keypad_4x3_adjustKeyNumber(row * N_COL + col + 1);
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	c9 01       	movw	r24, r18
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	98 2f       	mov	r25, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	89 0f       	add	r24, r25
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	0e 94 4e 0b 	call	0x169c	; 0x169c <Keypad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret
			/* clear the output column pin and
			 * enable the internal pull up resistors for the rows pins*/
			KEYPAD_PORT_OUT = ~(0b00010000 << col);

			/* loop for rows */
			for (row = 0; row < N_ROW; row++) {
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	8f 5f       	subi	r24, 0xFF	; 255
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	a0 f2       	brcs	.-88     	; 0x1634 <Keypad_getPressedKey+0x4a>
uint8 Keypad_getPressedKey(void) {
	uint8 col, row;
	/* loop until a key is pressed */
	while(1) {
		/* loop for columns */
		for (col = 0; col < N_COL; col++) {
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	08 f4       	brcc	.+2      	; 0x169a <Keypad_getPressedKey+0xb0>
    1698:	af cf       	rjmp	.-162    	; 0x15f8 <Keypad_getPressedKey+0xe>
    169a:	ac cf       	rjmp	.-168    	; 0x15f4 <Keypad_getPressedKey+0xa>

0000169c <Keypad_4x3_adjustKeyNumber>:
		}
	}
}

#if (N_COL == 3)
static uint8 Keypad_4x3_adjustKeyNumber(uint8 button_number) {
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Keypad_4x3_adjustKeyNumber+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <Keypad_4x3_adjustKeyNumber+0x8>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number) {
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3c 83       	std	Y+4, r19	; 0x04
    16b2:	2b 83       	std	Y+3, r18	; 0x03
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	8a 30       	cpi	r24, 0x0A	; 10
    16ba:	91 05       	cpc	r25, r1
    16bc:	81 f0       	breq	.+32     	; 0x16de <Keypad_4x3_adjustKeyNumber+0x42>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	2a 30       	cpi	r18, 0x0A	; 10
    16c4:	31 05       	cpc	r19, r1
    16c6:	9c f0       	brlt	.+38     	; 0x16ee <Keypad_4x3_adjustKeyNumber+0x52>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	8b 30       	cpi	r24, 0x0B	; 11
    16ce:	91 05       	cpc	r25, r1
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <Keypad_4x3_adjustKeyNumber+0x48>
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	2c 30       	cpi	r18, 0x0C	; 12
    16d8:	31 05       	cpc	r19, r1
    16da:	31 f0       	breq	.+12     	; 0x16e8 <Keypad_4x3_adjustKeyNumber+0x4c>
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <Keypad_4x3_adjustKeyNumber+0x52>
		case 10:		return '*';
    16de:	3a e2       	ldi	r19, 0x2A	; 42
    16e0:	3a 83       	std	Y+2, r19	; 0x02
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <Keypad_4x3_adjustKeyNumber+0x56>
		case 11:		return 0;
    16e4:	1a 82       	std	Y+2, r1	; 0x02
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <Keypad_4x3_adjustKeyNumber+0x56>
		case 12:		return '#';
    16e8:	83 e2       	ldi	r24, 0x23	; 35
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <Keypad_4x3_adjustKeyNumber+0x56>
		default:		return button_number;
    16ee:	99 81       	ldd	r25, Y+1	; 0x01
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <LCD_init>:


static void LCD_sendData(const uint8 data, const bool type);


void LCD_init(void) {
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	/* Configure the control pins (RS,RW,E) as output pins */
	LCD_CTRL_DIR |= (1<<RS) | (1<<RW) | (1<<E);
    170a:	aa e3       	ldi	r26, 0x3A	; 58
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ea e3       	ldi	r30, 0x3A	; 58
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	87 60       	ori	r24, 0x07	; 7
    1716:	8c 93       	st	X, r24
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
		/* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(TWO_LINE_FOUR_BIT_MODE);
	#elif (DATA_BITS_MODE == 8)
		/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(TWO_LINE_EIGHT_BIT_MODE);
    1718:	88 e3       	ldi	r24, 0x38	; 56
    171a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF); 	/* turn on display */
    171e:	8c e0       	ldi	r24, 0x0C	; 12
    1720:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_sendCommand>
	LCD_clearScreen();							/* clear the LCD */
    1724:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_clearScreen>
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <LCD_clearScreen>:

void LCD_clearScreen(void) {
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);				/* clear display */
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_sendCommand>
}
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <LCD_sendCommand>:

void LCD_sendCommand(const uint8 command) {
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	0f 92       	push	r0
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendData(command, 0);
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_sendData>
}
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <LCD_displayCharacter>:

void LCD_displayCharacter(const uint8 character) {
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendData(character, 1);
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_sendData>
}
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <LCD_sendData>:

static void LCD_sendData(const uint8 data, const bool type) {
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	ec 97       	sbiw	r28, 0x3c	; 60
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	89 af       	std	Y+57, r24	; 0x39
    1790:	6a af       	std	Y+58, r22	; 0x3a
	#if (DATA_BITS_MODE == 4)
		/* Configure 4 adjacent pins of the data port as output pins */
		LCD_DATA_DIR |= DATA_PINS;
	#elif (DATA_BITS_MODE == 8)
		/* Configure the data port as output port */
		LCD_DATA_DIR = 0xFF;
    1792:	e4 e3       	ldi	r30, 0x34	; 52
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	80 83       	st	Z, r24
	#endif

	/* data is command -> RS = 0 OR data is character -> RS = 1 */
	type == 0 ? CLEAR_BIT(LCD_CTRL_OUT,RS) : SET_BIT(LCD_CTRL_OUT,RS);
    179a:	8a ad       	ldd	r24, Y+58	; 0x3a
    179c:	88 23       	and	r24, r24
    179e:	49 f4       	brne	.+18     	; 0x17b2 <LCD_sendData+0x38>
    17a0:	ab e3       	ldi	r26, 0x3B	; 59
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8b 7f       	andi	r24, 0xFB	; 251
    17ac:	8c 93       	st	X, r24
    17ae:	8c 91       	ld	r24, X
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <LCD_sendData+0x48>
    17b2:	ab e3       	ldi	r26, 0x3B	; 59
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	eb e3       	ldi	r30, 0x3B	; 59
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	84 60       	ori	r24, 0x04	; 4
    17be:	8c 93       	st	X, r24
    17c0:	8c 91       	ld	r24, X
	CLEAR_BIT(LCD_CTRL_OUT,RW);		/* write data to LCD -> RW = 0 */
    17c2:	ab e3       	ldi	r26, 0x3B	; 59
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	eb e3       	ldi	r30, 0x3B	; 59
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8d 7f       	andi	r24, 0xFD	; 253
    17ce:	8c 93       	st	X, r24
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e8       	ldi	r26, 0x80	; 128
    17d6:	bf e3       	ldi	r27, 0x3F	; 63
    17d8:	8d ab       	std	Y+53, r24	; 0x35
    17da:	9e ab       	std	Y+54, r25	; 0x36
    17dc:	af ab       	std	Y+55, r26	; 0x37
    17de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	6d a9       	ldd	r22, Y+53	; 0x35
    17e2:	7e a9       	ldd	r23, Y+54	; 0x36
    17e4:	8f a9       	ldd	r24, Y+55	; 0x37
    17e6:	98 ad       	ldd	r25, Y+56	; 0x38
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a ef       	ldi	r20, 0xFA	; 250
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	89 ab       	std	Y+49, r24	; 0x31
    17fa:	9a ab       	std	Y+50, r25	; 0x32
    17fc:	ab ab       	std	Y+51, r26	; 0x33
    17fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1800:	69 a9       	ldd	r22, Y+49	; 0x31
    1802:	7a a9       	ldd	r23, Y+50	; 0x32
    1804:	8b a9       	ldd	r24, Y+51	; 0x33
    1806:	9c a9       	ldd	r25, Y+52	; 0x34
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <LCD_sendData+0xa8>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	98 ab       	std	Y+48, r25	; 0x30
    181e:	8f a7       	std	Y+47, r24	; 0x2f
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <LCD_sendData+0x126>
	else if (__tmp > 65535)
    1822:	69 a9       	ldd	r22, Y+49	; 0x31
    1824:	7a a9       	ldd	r23, Y+50	; 0x32
    1826:	8b a9       	ldd	r24, Y+51	; 0x33
    1828:	9c a9       	ldd	r25, Y+52	; 0x34
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	57 e4       	ldi	r21, 0x47	; 71
    1832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <LCD_sendData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	6d a9       	ldd	r22, Y+53	; 0x35
    183c:	7e a9       	ldd	r23, Y+54	; 0x36
    183e:	8f a9       	ldd	r24, Y+55	; 0x37
    1840:	98 ad       	ldd	r25, Y+56	; 0x38
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	51 e4       	ldi	r21, 0x41	; 65
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	98 ab       	std	Y+48, r25	; 0x30
    1860:	8f a7       	std	Y+47, r24	; 0x2f
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <LCD_sendData+0x108>
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9e a7       	std	Y+46, r25	; 0x2e
    186a:	8d a7       	std	Y+45, r24	; 0x2d
    186c:	8d a5       	ldd	r24, Y+45	; 0x2d
    186e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_sendData+0xf6>
    1874:	9e a7       	std	Y+46, r25	; 0x2e
    1876:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1878:	8f a5       	ldd	r24, Y+47	; 0x2f
    187a:	98 a9       	ldd	r25, Y+48	; 0x30
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	98 ab       	std	Y+48, r25	; 0x30
    1880:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1882:	8f a5       	ldd	r24, Y+47	; 0x2f
    1884:	98 a9       	ldd	r25, Y+48	; 0x30
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	69 f7       	brne	.-38     	; 0x1864 <LCD_sendData+0xea>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <LCD_sendData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	69 a9       	ldd	r22, Y+49	; 0x31
    188e:	7a a9       	ldd	r23, Y+50	; 0x32
    1890:	8b a9       	ldd	r24, Y+51	; 0x33
    1892:	9c a9       	ldd	r25, Y+52	; 0x34
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	98 ab       	std	Y+48, r25	; 0x30
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a2:	98 a9       	ldd	r25, Y+48	; 0x30
    18a4:	9c a7       	std	Y+44, r25	; 0x2c
    18a6:	8b a7       	std	Y+43, r24	; 0x2b
    18a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    18aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_sendData+0x132>
    18b0:	9c a7       	std	Y+44, r25	; 0x2c
    18b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_OUT,E);		/* Enable LCD -> E = 1 */
    18b4:	ab e3       	ldi	r26, 0x3B	; 59
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	eb e3       	ldi	r30, 0x3B	; 59
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	81 60       	ori	r24, 0x01	; 1
    18c0:	8c 93       	st	X, r24
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e8       	ldi	r26, 0x80	; 128
    18c8:	bf e3       	ldi	r27, 0x3F	; 63
    18ca:	8f a3       	std	Y+39, r24	; 0x27
    18cc:	98 a7       	std	Y+40, r25	; 0x28
    18ce:	a9 a7       	std	Y+41, r26	; 0x29
    18d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6f a1       	ldd	r22, Y+39	; 0x27
    18d4:	78 a5       	ldd	r23, Y+40	; 0x28
    18d6:	89 a5       	ldd	r24, Y+41	; 0x29
    18d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8b a3       	std	Y+35, r24	; 0x23
    18ec:	9c a3       	std	Y+36, r25	; 0x24
    18ee:	ad a3       	std	Y+37, r26	; 0x25
    18f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f2:	6b a1       	ldd	r22, Y+35	; 0x23
    18f4:	7c a1       	ldd	r23, Y+36	; 0x24
    18f6:	8d a1       	ldd	r24, Y+37	; 0x25
    18f8:	9e a1       	ldd	r25, Y+38	; 0x26
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_sendData+0x19a>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9a a3       	std	Y+34, r25	; 0x22
    1910:	89 a3       	std	Y+33, r24	; 0x21
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_sendData+0x218>
	else if (__tmp > 65535)
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_sendData+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6f a1       	ldd	r22, Y+39	; 0x27
    192e:	78 a5       	ldd	r23, Y+40	; 0x28
    1930:	89 a5       	ldd	r24, Y+41	; 0x29
    1932:	9a a5       	ldd	r25, Y+42	; 0x2a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_sendData+0x1fa>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	98 a3       	std	Y+32, r25	; 0x20
    195c:	8f 8f       	std	Y+31, r24	; 0x1f
    195e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1960:	98 a1       	ldd	r25, Y+32	; 0x20
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_sendData+0x1e8>
    1966:	98 a3       	std	Y+32, r25	; 0x20
    1968:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	89 a1       	ldd	r24, Y+33	; 0x21
    196c:	9a a1       	ldd	r25, Y+34	; 0x22
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9a a3       	std	Y+34, r25	; 0x22
    1972:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_sendData+0x1dc>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_sendData+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6b a1       	ldd	r22, Y+35	; 0x23
    1980:	7c a1       	ldd	r23, Y+36	; 0x24
    1982:	8d a1       	ldd	r24, Y+37	; 0x25
    1984:	9e a1       	ldd	r25, Y+38	; 0x26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	9e 8f       	std	Y+30, r25	; 0x1e
    1998:	8d 8f       	std	Y+29, r24	; 0x1d
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_sendData+0x224>
    19a2:	9e 8f       	std	Y+30, r25	; 0x1e
    19a4:	8d 8f       	std	Y+29, r24	; 0x1d
		CLEAR_BIT(LCD_CTRL_OUT,E);		/* disable LCD -> E = 0 */
		_delay_ms(1);					/* delay for processing Th = 13ns */

	#elif (DATA_BITS_MODE == 8)
		/* out the required data to the data bus D0 --> D7 */
		LCD_DATA_OUT = data;
    19a6:	e5 e3       	ldi	r30, 0x35	; 53
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 ad       	ldd	r24, Y+57	; 0x39
    19ac:	80 83       	st	Z, r24
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e8       	ldi	r26, 0x80	; 128
    19b4:	bf e3       	ldi	r27, 0x3F	; 63
    19b6:	89 8f       	std	Y+25, r24	; 0x19
    19b8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ba:	ab 8f       	std	Y+27, r26	; 0x1b
    19bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	69 8d       	ldd	r22, Y+25	; 0x19
    19c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a ef       	ldi	r20, 0xFA	; 250
    19cc:	54 e4       	ldi	r21, 0x44	; 68
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8d 8b       	std	Y+21, r24	; 0x15
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	af 8b       	std	Y+23, r26	; 0x17
    19dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <LCD_sendData+0x286>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <LCD_sendData+0x304>
	else if (__tmp > 65535)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <LCD_sendData+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <LCD_sendData+0x2e6>
    1a42:	88 ec       	ldi	r24, 0xC8	; 200
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
    1a4a:	89 89       	ldd	r24, Y+17	; 0x11
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_sendData+0x2d4>
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <LCD_sendData+0x2c8>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <LCD_sendData+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_sendData+0x310>
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);						/* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_OUT,E);			/* disable LCD -> E = 0 */
    1a92:	ab e3       	ldi	r26, 0x3B	; 59
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8e 7f       	andi	r24, 0xFE	; 254
    1a9e:	8c 93       	st	X, r24
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e8       	ldi	r26, 0x80	; 128
    1aa6:	bf e3       	ldi	r27, 0x3F	; 63
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	9c 87       	std	Y+12, r25	; 0x0c
    1aac:	ad 87       	std	Y+13, r26	; 0x0d
    1aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8f 83       	std	Y+7, r24	; 0x07
    1aca:	98 87       	std	Y+8, r25	; 0x08
    1acc:	a9 87       	std	Y+9, r26	; 0x09
    1ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <LCD_sendData+0x378>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <LCD_sendData+0x3f6>
	else if (__tmp > 65535)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <LCD_sendData+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <LCD_sendData+0x3d8>
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_sendData+0x3c6>
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <LCD_sendData+0x3ba>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <LCD_sendData+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_sendData+0x402>
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);						/* delay for processing Th = 13ns */
	#endif
}
    1b84:	ec 96       	adiw	r28, 0x3c	; 60
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <LCD_displayString>:

void LCD_displayString(const char *str) {
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <LCD_displayString+0x6>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	0a c0       	rjmp	.+20     	; 0x1bba <LCD_displayString+0x24>
	while ((*str) != '\0') {
		LCD_displayCharacter(*str);
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	80 81       	ld	r24, Z
    1bac:	0e 94 af 0b 	call	0x175e	; 0x175e <LCD_displayCharacter>
		str++;
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);						/* delay for processing Th = 13ns */
	#endif
}

void LCD_displayString(const char *str) {
	while ((*str) != '\0') {
    1bba:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbe:	80 81       	ld	r24, Z
    1bc0:	88 23       	and	r24, r24
    1bc2:	89 f7       	brne	.-30     	; 0x1ba6 <LCD_displayString+0x10>
		LCD_displayCharacter(*str);
		str++;
	}
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <LCD_moveCursorTo>:

void LCD_moveCursorTo(const uint8 row, const uint8 col) {
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <LCD_moveCursorTo+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <LCD_moveCursorTo+0x8>
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    1bde:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	/* calculate the required address */
	switch(row) {
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3d 83       	std	Y+5, r19	; 0x05
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	c1 f0       	breq	.+48     	; 0x1c24 <LCD_moveCursorTo+0x56>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <LCD_moveCursorTo+0x3a>
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	61 f0       	breq	.+24     	; 0x1c1e <LCD_moveCursorTo+0x50>
    1c06:	19 c0       	rjmp	.+50     	; 0x1c3a <LCD_moveCursorTo+0x6c>
    1c08:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	69 f0       	breq	.+26     	; 0x1c2c <LCD_moveCursorTo+0x5e>
    1c12:	8c 81       	ldd	r24, Y+4	; 0x04
    1c14:	9d 81       	ldd	r25, Y+5	; 0x05
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	91 05       	cpc	r25, r1
    1c1a:	61 f0       	breq	.+24     	; 0x1c34 <LCD_moveCursorTo+0x66>
    1c1c:	0e c0       	rjmp	.+28     	; 0x1c3a <LCD_moveCursorTo+0x6c>
		case 0:		address = col;				break;
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	0b c0       	rjmp	.+22     	; 0x1c3a <LCD_moveCursorTo+0x6c>
		case 1:		address = col + 0x40;		break;
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	80 5c       	subi	r24, 0xC0	; 192
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <LCD_moveCursorTo+0x6c>
		case 2:		address = col + 0x10;		break;
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	80 5f       	subi	r24, 0xF0	; 240
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <LCD_moveCursorTo+0x6c>
		case 3:		address = col + 0x50;		break;
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	80 5b       	subi	r24, 0xB0	; 176
    1c38:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command
	 * 0x80 + address OR 0x80 | address (no difference)
	 * Max Address = 0x5F = 0b0101.1111 AND 0x80 = 0b1000.0000*/
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	80 68       	ori	r24, 0x80	; 128
    1c3e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_sendCommand>
}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LCD_displayStringAt>:

void LCD_displayStringAt(const uint8 row, const uint8 col, const char *str) {
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <LCD_displayStringAt+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <LCD_displayStringAt+0x8>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	6a 83       	std	Y+2, r22	; 0x02
    1c62:	5c 83       	std	Y+4, r21	; 0x04
    1c64:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursorTo(row,col);		/* go to to the required LCD position */
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	6a 81       	ldd	r22, Y+2	; 0x02
    1c6a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_moveCursorTo>
	LCD_displayString(str);			/* display the string */
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_displayString>
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <LCD_displayInteger>:

void LCD_displayInteger(const sint32 data) {
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	64 97       	sbiw	r28, 0x14	; 20
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	69 8b       	std	Y+17, r22	; 0x11
    1c9a:	7a 8b       	std	Y+18, r23	; 0x12
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16];					/* string to hold the ASCII result */
   itoa(data, buff, 10);			/* 10 for decimal (base 10) */
    1ca0:	89 89       	ldd	r24, Y+17	; 0x11
    1ca2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca4:	9e 01       	movw	r18, r28
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	b9 01       	movw	r22, r18
    1cac:	4a e0       	ldi	r20, 0x0A	; 10
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	0e 94 b9 13 	call	0x2772	; 0x2772 <itoa>
   LCD_displayString(buff);			/* display the string */
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_displayString>
}
    1cbc:	64 96       	adiw	r28, 0x14	; 20
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <__vector_9>:
static volatile void (*g_timer2_overflow)(void) = NULL_PTR;
static volatile void (*g_timer2_compare)(void) = NULL_PTR;


/* Interrupt Sevice Routines of all timers modules and modes */
ISR(TIMER0_OVF_vect) {
    1cce:	1f 92       	push	r1
    1cd0:	0f 92       	push	r0
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	0f 92       	push	r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	2f 93       	push	r18
    1cda:	3f 93       	push	r19
    1cdc:	4f 93       	push	r20
    1cde:	5f 93       	push	r21
    1ce0:	6f 93       	push	r22
    1ce2:	7f 93       	push	r23
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	ef 93       	push	r30
    1cee:	ff 93       	push	r31
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_overflow != NULL_PTR)
    1cf8:	80 91 31 01 	lds	r24, 0x0131
    1cfc:	90 91 32 01 	lds	r25, 0x0132
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	29 f0       	breq	.+10     	; 0x1d0e <__vector_9+0x40>
		(*g_timer0_overflow)();
    1d04:	e0 91 31 01 	lds	r30, 0x0131
    1d08:	f0 91 32 01 	lds	r31, 0x0132
    1d0c:	09 95       	icall
}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	ff 91       	pop	r31
    1d14:	ef 91       	pop	r30
    1d16:	bf 91       	pop	r27
    1d18:	af 91       	pop	r26
    1d1a:	9f 91       	pop	r25
    1d1c:	8f 91       	pop	r24
    1d1e:	7f 91       	pop	r23
    1d20:	6f 91       	pop	r22
    1d22:	5f 91       	pop	r21
    1d24:	4f 91       	pop	r20
    1d26:	3f 91       	pop	r19
    1d28:	2f 91       	pop	r18
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	0f 90       	pop	r0
    1d30:	1f 90       	pop	r1
    1d32:	18 95       	reti

00001d34 <__vector_19>:

ISR(TIMER0_COMP_vect) {
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	2f 93       	push	r18
    1d40:	3f 93       	push	r19
    1d42:	4f 93       	push	r20
    1d44:	5f 93       	push	r21
    1d46:	6f 93       	push	r22
    1d48:	7f 93       	push	r23
    1d4a:	8f 93       	push	r24
    1d4c:	9f 93       	push	r25
    1d4e:	af 93       	push	r26
    1d50:	bf 93       	push	r27
    1d52:	ef 93       	push	r30
    1d54:	ff 93       	push	r31
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_compare != NULL_PTR)
    1d5e:	80 91 33 01 	lds	r24, 0x0133
    1d62:	90 91 34 01 	lds	r25, 0x0134
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <__vector_19+0x40>
		(*g_timer0_compare)();
    1d6a:	e0 91 33 01 	lds	r30, 0x0133
    1d6e:	f0 91 34 01 	lds	r31, 0x0134
    1d72:	09 95       	icall
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	ff 91       	pop	r31
    1d7a:	ef 91       	pop	r30
    1d7c:	bf 91       	pop	r27
    1d7e:	af 91       	pop	r26
    1d80:	9f 91       	pop	r25
    1d82:	8f 91       	pop	r24
    1d84:	7f 91       	pop	r23
    1d86:	6f 91       	pop	r22
    1d88:	5f 91       	pop	r21
    1d8a:	4f 91       	pop	r20
    1d8c:	3f 91       	pop	r19
    1d8e:	2f 91       	pop	r18
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	0f 90       	pop	r0
    1d96:	1f 90       	pop	r1
    1d98:	18 95       	reti

00001d9a <__vector_8>:

ISR(TIMER1_OVF_vect) {
    1d9a:	1f 92       	push	r1
    1d9c:	0f 92       	push	r0
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	0f 92       	push	r0
    1da2:	11 24       	eor	r1, r1
    1da4:	2f 93       	push	r18
    1da6:	3f 93       	push	r19
    1da8:	4f 93       	push	r20
    1daa:	5f 93       	push	r21
    1dac:	6f 93       	push	r22
    1dae:	7f 93       	push	r23
    1db0:	8f 93       	push	r24
    1db2:	9f 93       	push	r25
    1db4:	af 93       	push	r26
    1db6:	bf 93       	push	r27
    1db8:	ef 93       	push	r30
    1dba:	ff 93       	push	r31
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_overflow != NULL_PTR)
    1dc4:	80 91 35 01 	lds	r24, 0x0135
    1dc8:	90 91 36 01 	lds	r25, 0x0136
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	29 f0       	breq	.+10     	; 0x1dda <__vector_8+0x40>
		(*g_timer1_overflow)();
    1dd0:	e0 91 35 01 	lds	r30, 0x0135
    1dd4:	f0 91 36 01 	lds	r31, 0x0136
    1dd8:	09 95       	icall
}
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	bf 91       	pop	r27
    1de4:	af 91       	pop	r26
    1de6:	9f 91       	pop	r25
    1de8:	8f 91       	pop	r24
    1dea:	7f 91       	pop	r23
    1dec:	6f 91       	pop	r22
    1dee:	5f 91       	pop	r21
    1df0:	4f 91       	pop	r20
    1df2:	3f 91       	pop	r19
    1df4:	2f 91       	pop	r18
    1df6:	0f 90       	pop	r0
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	0f 90       	pop	r0
    1dfc:	1f 90       	pop	r1
    1dfe:	18 95       	reti

00001e00 <__vector_6>:

ISR(TIMER1_COMPA_vect) {
    1e00:	1f 92       	push	r1
    1e02:	0f 92       	push	r0
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	0f 92       	push	r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	2f 93       	push	r18
    1e0c:	3f 93       	push	r19
    1e0e:	4f 93       	push	r20
    1e10:	5f 93       	push	r21
    1e12:	6f 93       	push	r22
    1e14:	7f 93       	push	r23
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	af 93       	push	r26
    1e1c:	bf 93       	push	r27
    1e1e:	ef 93       	push	r30
    1e20:	ff 93       	push	r31
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_compareA != NULL_PTR)
    1e2a:	80 91 37 01 	lds	r24, 0x0137
    1e2e:	90 91 38 01 	lds	r25, 0x0138
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	29 f0       	breq	.+10     	; 0x1e40 <__vector_6+0x40>
		(*g_timer1_compareA)();
    1e36:	e0 91 37 01 	lds	r30, 0x0137
    1e3a:	f0 91 38 01 	lds	r31, 0x0138
    1e3e:	09 95       	icall
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <__vector_7>:

ISR(TIMER1_COMPB_vect) {
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_compareB != NULL_PTR)
    1e90:	80 91 39 01 	lds	r24, 0x0139
    1e94:	90 91 3a 01 	lds	r25, 0x013A
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	29 f0       	breq	.+10     	; 0x1ea6 <__vector_7+0x40>
		(*g_timer1_compareB)();
    1e9c:	e0 91 39 01 	lds	r30, 0x0139
    1ea0:	f0 91 3a 01 	lds	r31, 0x013A
    1ea4:	09 95       	icall
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	bf 91       	pop	r27
    1eb0:	af 91       	pop	r26
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	7f 91       	pop	r23
    1eb8:	6f 91       	pop	r22
    1eba:	5f 91       	pop	r21
    1ebc:	4f 91       	pop	r20
    1ebe:	3f 91       	pop	r19
    1ec0:	2f 91       	pop	r18
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <__vector_4>:

ISR(TIMER2_OVF_vect) {
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	2f 93       	push	r18
    1ed8:	3f 93       	push	r19
    1eda:	4f 93       	push	r20
    1edc:	5f 93       	push	r21
    1ede:	6f 93       	push	r22
    1ee0:	7f 93       	push	r23
    1ee2:	8f 93       	push	r24
    1ee4:	9f 93       	push	r25
    1ee6:	af 93       	push	r26
    1ee8:	bf 93       	push	r27
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_overflow != NULL_PTR)
    1ef6:	80 91 3b 01 	lds	r24, 0x013B
    1efa:	90 91 3c 01 	lds	r25, 0x013C
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	29 f0       	breq	.+10     	; 0x1f0c <__vector_4+0x40>
		(*g_timer2_overflow)();
    1f02:	e0 91 3b 01 	lds	r30, 0x013B
    1f06:	f0 91 3c 01 	lds	r31, 0x013C
    1f0a:	09 95       	icall
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	0f 90       	pop	r0
    1f2e:	1f 90       	pop	r1
    1f30:	18 95       	reti

00001f32 <__vector_3>:

ISR(TIMER2_COMP_vect) {
    1f32:	1f 92       	push	r1
    1f34:	0f 92       	push	r0
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	0f 92       	push	r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	2f 93       	push	r18
    1f3e:	3f 93       	push	r19
    1f40:	4f 93       	push	r20
    1f42:	5f 93       	push	r21
    1f44:	6f 93       	push	r22
    1f46:	7f 93       	push	r23
    1f48:	8f 93       	push	r24
    1f4a:	9f 93       	push	r25
    1f4c:	af 93       	push	r26
    1f4e:	bf 93       	push	r27
    1f50:	ef 93       	push	r30
    1f52:	ff 93       	push	r31
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_compare != NULL_PTR)
    1f5c:	80 91 3d 01 	lds	r24, 0x013D
    1f60:	90 91 3e 01 	lds	r25, 0x013E
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	29 f0       	breq	.+10     	; 0x1f72 <__vector_3+0x40>
		(*g_timer2_compare)();
    1f68:	e0 91 3d 01 	lds	r30, 0x013D
    1f6c:	f0 91 3e 01 	lds	r31, 0x013E
    1f70:	09 95       	icall
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	bf 91       	pop	r27
    1f7c:	af 91       	pop	r26
    1f7e:	9f 91       	pop	r25
    1f80:	8f 91       	pop	r24
    1f82:	7f 91       	pop	r23
    1f84:	6f 91       	pop	r22
    1f86:	5f 91       	pop	r21
    1f88:	4f 91       	pop	r20
    1f8a:	3f 91       	pop	r19
    1f8c:	2f 91       	pop	r18
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <TIMERS_init>:


void TIMERS_init(const TIMERS_ConfigType * const config_ptr) {
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <TIMERS_init+0x6>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
	 * TOIE1  = x		TIMER1 overflow interrupt enable
	 * OCIE0  = x		TIMER0 output compare match interrupt enable
	 * TOIE0  = x		TIMER0 overflow interrupt enable
	 */

	if (config_ptr->num == TIMER1 || config_ptr->num == TIMER1A || config_ptr->num == TIMER1B) {
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	80 81       	ld	r24, Z
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	59 f0       	breq	.+22     	; 0x1fc6 <TIMERS_init+0x2e>
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	80 81       	ld	r24, Z
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	31 f0       	breq	.+12     	; 0x1fc6 <TIMERS_init+0x2e>
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	80 81       	ld	r24, Z
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <TIMERS_init+0x2e>
    1fc4:	34 c1       	rjmp	.+616    	; 0x222e <TIMERS_init+0x296>
		 * FOC1B    = x		force output compare for channel B
		 * WGM11:0  = xx	waveform generation mode
		 */

		/* set waveform generation mode */
		TCCR1A = (config_ptr->mode & 0x03);
    1fc6:	af e4       	ldi	r26, 0x4F	; 79
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fce:	81 81       	ldd	r24, Z+1	; 0x01
    1fd0:	83 70       	andi	r24, 0x03	; 3
    1fd2:	8c 93       	st	X, r24

		/* enable / disable force output compare */
		if (config_ptr->mode == NORMAL || config_ptr->mode == CTC_OCR1A || config_ptr->mode == CTC_ICR1) {
    1fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd8:	81 81       	ldd	r24, Z+1	; 0x01
    1fda:	88 23       	and	r24, r24
    1fdc:	51 f0       	breq	.+20     	; 0x1ff2 <TIMERS_init+0x5a>
    1fde:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe2:	81 81       	ldd	r24, Z+1	; 0x01
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	29 f0       	breq	.+10     	; 0x1ff2 <TIMERS_init+0x5a>
    1fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fea:	fa 81       	ldd	r31, Y+2	; 0x02
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	8c 30       	cpi	r24, 0x0C	; 12
    1ff0:	31 f5       	brne	.+76     	; 0x203e <TIMERS_init+0xa6>
			if (config_ptr->num == TIMER1)
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	80 81       	ld	r24, Z
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	41 f4       	brne	.+16     	; 0x200c <TIMERS_init+0x74>
				TCCR1A |= 0x0C;
    1ffc:	af e4       	ldi	r26, 0x4F	; 79
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	ef e4       	ldi	r30, 0x4F	; 79
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8c 60       	ori	r24, 0x0C	; 12
    2008:	8c 93       	st	X, r24
    200a:	19 c0       	rjmp	.+50     	; 0x203e <TIMERS_init+0xa6>
			else if (config_ptr->num == TIMER1A)
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	80 81       	ld	r24, Z
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	41 f4       	brne	.+16     	; 0x2026 <TIMERS_init+0x8e>
				SET_BIT(TCCR1A,FOC1A);
    2016:	af e4       	ldi	r26, 0x4F	; 79
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	ef e4       	ldi	r30, 0x4F	; 79
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	88 60       	ori	r24, 0x08	; 8
    2022:	8c 93       	st	X, r24
    2024:	0c c0       	rjmp	.+24     	; 0x203e <TIMERS_init+0xa6>
			else if (config_ptr->num == TIMER1B)
    2026:	e9 81       	ldd	r30, Y+1	; 0x01
    2028:	fa 81       	ldd	r31, Y+2	; 0x02
    202a:	80 81       	ld	r24, Z
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	39 f4       	brne	.+14     	; 0x203e <TIMERS_init+0xa6>
				SET_BIT(TCCR1A,FOC1B);
    2030:	af e4       	ldi	r26, 0x4F	; 79
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ef e4       	ldi	r30, 0x4F	; 79
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	84 60       	ori	r24, 0x04	; 4
    203c:	8c 93       	st	X, r24
		}

		/* set compare match output mode */
		if (config_ptr->compare != DISCONNECT_OC){
    203e:	e9 81       	ldd	r30, Y+1	; 0x01
    2040:	fa 81       	ldd	r31, Y+2	; 0x02
    2042:	83 81       	ldd	r24, Z+3	; 0x03
    2044:	88 23       	and	r24, r24
    2046:	09 f4       	brne	.+2      	; 0x204a <TIMERS_init+0xb2>
    2048:	72 c0       	rjmp	.+228    	; 0x212e <TIMERS_init+0x196>
			if (config_ptr->num == TIMER1) {
    204a:	e9 81       	ldd	r30, Y+1	; 0x01
    204c:	fa 81       	ldd	r31, Y+2	; 0x02
    204e:	80 81       	ld	r24, Z
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	59 f5       	brne	.+86     	; 0x20aa <TIMERS_init+0x112>
				TCCR1A |= (config_ptr->compare << 4) | (config_ptr->compare << 6);
    2054:	af e4       	ldi	r26, 0x4F	; 79
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	ef e4       	ldi	r30, 0x4F	; 79
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	38 2f       	mov	r19, r24
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	83 81       	ldd	r24, Z+3	; 0x03
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	82 95       	swap	r24
    206c:	92 95       	swap	r25
    206e:	90 7f       	andi	r25, 0xF0	; 240
    2070:	98 27       	eor	r25, r24
    2072:	80 7f       	andi	r24, 0xF0	; 240
    2074:	98 27       	eor	r25, r24
    2076:	28 2f       	mov	r18, r24
    2078:	e9 81       	ldd	r30, Y+1	; 0x01
    207a:	fa 81       	ldd	r31, Y+2	; 0x02
    207c:	83 81       	ldd	r24, Z+3	; 0x03
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	00 24       	eor	r0, r0
    2084:	96 95       	lsr	r25
    2086:	87 95       	ror	r24
    2088:	07 94       	ror	r0
    208a:	96 95       	lsr	r25
    208c:	87 95       	ror	r24
    208e:	07 94       	ror	r0
    2090:	98 2f       	mov	r25, r24
    2092:	80 2d       	mov	r24, r0
    2094:	82 2b       	or	r24, r18
    2096:	83 2b       	or	r24, r19
    2098:	8c 93       	st	X, r24
				DDRD |= 0x30;				/* set pins OC1A and OC1B as output pins */
    209a:	a1 e3       	ldi	r26, 0x31	; 49
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e1 e3       	ldi	r30, 0x31	; 49
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 63       	ori	r24, 0x30	; 48
    20a6:	8c 93       	st	X, r24
    20a8:	42 c0       	rjmp	.+132    	; 0x212e <TIMERS_init+0x196>
			}

			else if (config_ptr->num == TIMER1A) {
    20aa:	e9 81       	ldd	r30, Y+1	; 0x01
    20ac:	fa 81       	ldd	r31, Y+2	; 0x02
    20ae:	80 81       	ld	r24, Z
    20b0:	82 30       	cpi	r24, 0x02	; 2
    20b2:	f1 f4       	brne	.+60     	; 0x20f0 <TIMERS_init+0x158>
				TCCR1A |= (config_ptr->compare << 6);
    20b4:	af e4       	ldi	r26, 0x4F	; 79
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	ef e4       	ldi	r30, 0x4F	; 79
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	e9 81       	ldd	r30, Y+1	; 0x01
    20c2:	fa 81       	ldd	r31, Y+2	; 0x02
    20c4:	83 81       	ldd	r24, Z+3	; 0x03
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	00 24       	eor	r0, r0
    20cc:	96 95       	lsr	r25
    20ce:	87 95       	ror	r24
    20d0:	07 94       	ror	r0
    20d2:	96 95       	lsr	r25
    20d4:	87 95       	ror	r24
    20d6:	07 94       	ror	r0
    20d8:	98 2f       	mov	r25, r24
    20da:	80 2d       	mov	r24, r0
    20dc:	82 2b       	or	r24, r18
    20de:	8c 93       	st	X, r24
				SET_BIT(DDRD,PD5);			/* set pin OC1A (PD5) as output pin */
    20e0:	a1 e3       	ldi	r26, 0x31	; 49
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e1 e3       	ldi	r30, 0x31	; 49
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	80 62       	ori	r24, 0x20	; 32
    20ec:	8c 93       	st	X, r24
    20ee:	1f c0       	rjmp	.+62     	; 0x212e <TIMERS_init+0x196>
			}

			else if (config_ptr->num == TIMER1B) {
    20f0:	e9 81       	ldd	r30, Y+1	; 0x01
    20f2:	fa 81       	ldd	r31, Y+2	; 0x02
    20f4:	80 81       	ld	r24, Z
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	d1 f4       	brne	.+52     	; 0x212e <TIMERS_init+0x196>
				TCCR1A |= (config_ptr->compare << 4);
    20fa:	af e4       	ldi	r26, 0x4F	; 79
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	ef e4       	ldi	r30, 0x4F	; 79
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	28 2f       	mov	r18, r24
    2106:	e9 81       	ldd	r30, Y+1	; 0x01
    2108:	fa 81       	ldd	r31, Y+2	; 0x02
    210a:	83 81       	ldd	r24, Z+3	; 0x03
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	82 95       	swap	r24
    2112:	92 95       	swap	r25
    2114:	90 7f       	andi	r25, 0xF0	; 240
    2116:	98 27       	eor	r25, r24
    2118:	80 7f       	andi	r24, 0xF0	; 240
    211a:	98 27       	eor	r25, r24
    211c:	82 2b       	or	r24, r18
    211e:	8c 93       	st	X, r24
				SET_BIT(DDRD,PD4);			/* set pin OC1B (PD4) as output pin */
    2120:	a1 e3       	ldi	r26, 0x31	; 49
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e1 e3       	ldi	r30, 0x31	; 49
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	80 61       	ori	r24, 0x10	; 16
    212c:	8c 93       	st	X, r24
		 * WGM13:2 = xx		waveform generation mode
		 * CS12:0  = xxx	clock select
		 */

		/* set clock prescaler */
		TCCR1B = config_ptr->clock;
    212e:	ae e4       	ldi	r26, 0x4E	; 78
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e9 81       	ldd	r30, Y+1	; 0x01
    2134:	fa 81       	ldd	r31, Y+2	; 0x02
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	8c 93       	st	X, r24

		/* set waveform generation mode */
		TCCR1B = (TCCR1B & 0xE7) | ((config_ptr->mode & 0x0C) << 1);
    213a:	ae e4       	ldi	r26, 0x4E	; 78
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	ee e4       	ldi	r30, 0x4E	; 78
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	28 2f       	mov	r18, r24
    2146:	27 7e       	andi	r18, 0xE7	; 231
    2148:	e9 81       	ldd	r30, Y+1	; 0x01
    214a:	fa 81       	ldd	r31, Y+2	; 0x02
    214c:	81 81       	ldd	r24, Z+1	; 0x01
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	8c 70       	andi	r24, 0x0C	; 12
    2154:	90 70       	andi	r25, 0x00	; 0
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	82 2b       	or	r24, r18
    215c:	8c 93       	st	X, r24


		/* set initial value */
		TCNT1 = config_ptr->initial_value;
    215e:	ac e4       	ldi	r26, 0x4C	; 76
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e9 81       	ldd	r30, Y+1	; 0x01
    2164:	fa 81       	ldd	r31, Y+2	; 0x02
    2166:	84 81       	ldd	r24, Z+4	; 0x04
    2168:	95 81       	ldd	r25, Z+5	; 0x05
    216a:	11 96       	adiw	r26, 0x01	; 1
    216c:	9c 93       	st	X, r25
    216e:	8e 93       	st	-X, r24

		/* set compare value */
		if (config_ptr->num == TIMER1) {
    2170:	e9 81       	ldd	r30, Y+1	; 0x01
    2172:	fa 81       	ldd	r31, Y+2	; 0x02
    2174:	80 81       	ld	r24, Z
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	99 f4       	brne	.+38     	; 0x21a0 <TIMERS_init+0x208>
			OCR1A = config_ptr->compare_value;
    217a:	aa e4       	ldi	r26, 0x4A	; 74
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e9 81       	ldd	r30, Y+1	; 0x01
    2180:	fa 81       	ldd	r31, Y+2	; 0x02
    2182:	86 81       	ldd	r24, Z+6	; 0x06
    2184:	97 81       	ldd	r25, Z+7	; 0x07
    2186:	11 96       	adiw	r26, 0x01	; 1
    2188:	9c 93       	st	X, r25
    218a:	8e 93       	st	-X, r24
			OCR1B = config_ptr->compare_value;
    218c:	a8 e4       	ldi	r26, 0x48	; 72
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e9 81       	ldd	r30, Y+1	; 0x01
    2192:	fa 81       	ldd	r31, Y+2	; 0x02
    2194:	86 81       	ldd	r24, Z+6	; 0x06
    2196:	97 81       	ldd	r25, Z+7	; 0x07
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	9c 93       	st	X, r25
    219c:	8e 93       	st	-X, r24
    219e:	1f c0       	rjmp	.+62     	; 0x21de <TIMERS_init+0x246>
		}
		else if (config_ptr->num == TIMER1A)
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	80 81       	ld	r24, Z
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	59 f4       	brne	.+22     	; 0x21c0 <TIMERS_init+0x228>
			OCR1A = config_ptr->compare_value;
    21aa:	ea e4       	ldi	r30, 0x4A	; 74
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	a9 81       	ldd	r26, Y+1	; 0x01
    21b0:	ba 81       	ldd	r27, Y+2	; 0x02
    21b2:	16 96       	adiw	r26, 0x06	; 6
    21b4:	8d 91       	ld	r24, X+
    21b6:	9c 91       	ld	r25, X
    21b8:	17 97       	sbiw	r26, 0x07	; 7
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	0f c0       	rjmp	.+30     	; 0x21de <TIMERS_init+0x246>
		else if (config_ptr->num == TIMER1B)
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	80 81       	ld	r24, Z
    21c6:	83 30       	cpi	r24, 0x03	; 3
    21c8:	51 f4       	brne	.+20     	; 0x21de <TIMERS_init+0x246>
			OCR1B = config_ptr->compare_value;
    21ca:	e8 e4       	ldi	r30, 0x48	; 72
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	a9 81       	ldd	r26, Y+1	; 0x01
    21d0:	ba 81       	ldd	r27, Y+2	; 0x02
    21d2:	16 96       	adiw	r26, 0x06	; 6
    21d4:	8d 91       	ld	r24, X+
    21d6:	9c 91       	ld	r25, X
    21d8:	17 97       	sbiw	r26, 0x07	; 7
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24

		/* enable interrupt */
		if (config_ptr->num == TIMER1)
    21de:	e9 81       	ldd	r30, Y+1	; 0x01
    21e0:	fa 81       	ldd	r31, Y+2	; 0x02
    21e2:	80 81       	ld	r24, Z
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	41 f4       	brne	.+16     	; 0x21f8 <TIMERS_init+0x260>
			SET_BIT(TIMSK,TOIE1);
    21e8:	a9 e5       	ldi	r26, 0x59	; 89
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 e5       	ldi	r30, 0x59	; 89
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	84 60       	ori	r24, 0x04	; 4
    21f4:	8c 93       	st	X, r24
    21f6:	2f c1       	rjmp	.+606    	; 0x2456 <TIMERS_init+0x4be>
		else if (config_ptr->num == TIMER1A)
    21f8:	e9 81       	ldd	r30, Y+1	; 0x01
    21fa:	fa 81       	ldd	r31, Y+2	; 0x02
    21fc:	80 81       	ld	r24, Z
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	41 f4       	brne	.+16     	; 0x2212 <TIMERS_init+0x27a>
			SET_BIT(TIMSK,OCIE1A);
    2202:	a9 e5       	ldi	r26, 0x59	; 89
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e9 e5       	ldi	r30, 0x59	; 89
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	80 61       	ori	r24, 0x10	; 16
    220e:	8c 93       	st	X, r24
    2210:	22 c1       	rjmp	.+580    	; 0x2456 <TIMERS_init+0x4be>
		else if (config_ptr->num == TIMER1B)
    2212:	e9 81       	ldd	r30, Y+1	; 0x01
    2214:	fa 81       	ldd	r31, Y+2	; 0x02
    2216:	80 81       	ld	r24, Z
    2218:	83 30       	cpi	r24, 0x03	; 3
    221a:	09 f0       	breq	.+2      	; 0x221e <TIMERS_init+0x286>
    221c:	1c c1       	rjmp	.+568    	; 0x2456 <TIMERS_init+0x4be>
			SET_BIT(TIMSK,OCIE1B);
    221e:	a9 e5       	ldi	r26, 0x59	; 89
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e9 e5       	ldi	r30, 0x59	; 89
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 60       	ori	r24, 0x08	; 8
    222a:	8c 93       	st	X, r24
    222c:	14 c1       	rjmp	.+552    	; 0x2456 <TIMERS_init+0x4be>
	}

	else if (config_ptr->num == TIMER0) {
    222e:	e9 81       	ldd	r30, Y+1	; 0x01
    2230:	fa 81       	ldd	r31, Y+2	; 0x02
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	09 f0       	breq	.+2      	; 0x223a <TIMERS_init+0x2a2>
    2238:	85 c0       	rjmp	.+266    	; 0x2344 <TIMERS_init+0x3ac>
		 * WGM01   = x		waveform generation mode
		 * CS02:0  = xxx	clock select
		 */

		/* set clock prescaler */
		TCCR0 = config_ptr->clock;
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	8c 93       	st	X, r24

		/* set waveform generation mode */
		if (config_ptr->mode == PWM_PHASE_CORRECT)
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	81 81       	ldd	r24, Z+1	; 0x01
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	41 f4       	brne	.+16     	; 0x2260 <TIMERS_init+0x2c8>
			SET_BIT(TCCR0,WGM00);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 64       	ori	r24, 0x40	; 64
    225c:	8c 93       	st	X, r24
    225e:	19 c0       	rjmp	.+50     	; 0x2292 <TIMERS_init+0x2fa>
		else if (config_ptr->mode == CTC)
    2260:	e9 81       	ldd	r30, Y+1	; 0x01
    2262:	fa 81       	ldd	r31, Y+2	; 0x02
    2264:	81 81       	ldd	r24, Z+1	; 0x01
    2266:	82 30       	cpi	r24, 0x02	; 2
    2268:	41 f4       	brne	.+16     	; 0x227a <TIMERS_init+0x2e2>
			SET_BIT(TCCR0,WGM01);
    226a:	a3 e5       	ldi	r26, 0x53	; 83
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e3 e5       	ldi	r30, 0x53	; 83
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	88 60       	ori	r24, 0x08	; 8
    2276:	8c 93       	st	X, r24
    2278:	0c c0       	rjmp	.+24     	; 0x2292 <TIMERS_init+0x2fa>
		else if (config_ptr->mode == FAST_PWM)
    227a:	e9 81       	ldd	r30, Y+1	; 0x01
    227c:	fa 81       	ldd	r31, Y+2	; 0x02
    227e:	81 81       	ldd	r24, Z+1	; 0x01
    2280:	83 30       	cpi	r24, 0x03	; 3
    2282:	39 f4       	brne	.+14     	; 0x2292 <TIMERS_init+0x2fa>
			TCCR0 |= 0x48;
    2284:	a3 e5       	ldi	r26, 0x53	; 83
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e3 e5       	ldi	r30, 0x53	; 83
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 64       	ori	r24, 0x48	; 72
    2290:	8c 93       	st	X, r24
		
		/* set compare match output mode */
		if (config_ptr->compare != DISCONNECT_OC) {
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	fa 81       	ldd	r31, Y+2	; 0x02
    2296:	83 81       	ldd	r24, Z+3	; 0x03
    2298:	88 23       	and	r24, r24
    229a:	d1 f0       	breq	.+52     	; 0x22d0 <TIMERS_init+0x338>
			TCCR0 |= (config_ptr->compare << 4);
    229c:	a3 e5       	ldi	r26, 0x53	; 83
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e3 e5       	ldi	r30, 0x53	; 83
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	28 2f       	mov	r18, r24
    22a8:	e9 81       	ldd	r30, Y+1	; 0x01
    22aa:	fa 81       	ldd	r31, Y+2	; 0x02
    22ac:	83 81       	ldd	r24, Z+3	; 0x03
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	82 95       	swap	r24
    22b4:	92 95       	swap	r25
    22b6:	90 7f       	andi	r25, 0xF0	; 240
    22b8:	98 27       	eor	r25, r24
    22ba:	80 7f       	andi	r24, 0xF0	; 240
    22bc:	98 27       	eor	r25, r24
    22be:	82 2b       	or	r24, r18
    22c0:	8c 93       	st	X, r24
			SET_BIT(DDRB,PB3);			/* set pin OC0 (PB3) as output pin */
    22c2:	a7 e3       	ldi	r26, 0x37	; 55
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e7 e3       	ldi	r30, 0x37	; 55
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 60       	ori	r24, 0x08	; 8
    22ce:	8c 93       	st	X, r24
		}
		
		/* enable / disable force output compare */
		if (config_ptr->mode == NORMAL || config_ptr->mode == CTC)
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	81 81       	ldd	r24, Z+1	; 0x01
    22d6:	88 23       	and	r24, r24
    22d8:	29 f0       	breq	.+10     	; 0x22e4 <TIMERS_init+0x34c>
    22da:	e9 81       	ldd	r30, Y+1	; 0x01
    22dc:	fa 81       	ldd	r31, Y+2	; 0x02
    22de:	81 81       	ldd	r24, Z+1	; 0x01
    22e0:	82 30       	cpi	r24, 0x02	; 2
    22e2:	39 f4       	brne	.+14     	; 0x22f2 <TIMERS_init+0x35a>
			SET_BIT(TCCR0,FOC0);
    22e4:	a3 e5       	ldi	r26, 0x53	; 83
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e3 e5       	ldi	r30, 0x53	; 83
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 68       	ori	r24, 0x80	; 128
    22f0:	8c 93       	st	X, r24


		/* set initial value */
		TCNT0 = config_ptr->initial_value;
    22f2:	a2 e5       	ldi	r26, 0x52	; 82
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	84 81       	ldd	r24, Z+4	; 0x04
    22fc:	95 81       	ldd	r25, Z+5	; 0x05
    22fe:	8c 93       	st	X, r24

		/* set compare value */
		OCR0 = config_ptr->compare_value;
    2300:	ac e5       	ldi	r26, 0x5C	; 92
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e9 81       	ldd	r30, Y+1	; 0x01
    2306:	fa 81       	ldd	r31, Y+2	; 0x02
    2308:	86 81       	ldd	r24, Z+6	; 0x06
    230a:	97 81       	ldd	r25, Z+7	; 0x07
    230c:	8c 93       	st	X, r24
		
		/* enable interrupt */
		if (config_ptr->mode == NORMAL)
    230e:	e9 81       	ldd	r30, Y+1	; 0x01
    2310:	fa 81       	ldd	r31, Y+2	; 0x02
    2312:	81 81       	ldd	r24, Z+1	; 0x01
    2314:	88 23       	and	r24, r24
    2316:	41 f4       	brne	.+16     	; 0x2328 <TIMERS_init+0x390>
			SET_BIT(TIMSK,TOIE0);
    2318:	a9 e5       	ldi	r26, 0x59	; 89
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e9 e5       	ldi	r30, 0x59	; 89
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	81 60       	ori	r24, 0x01	; 1
    2324:	8c 93       	st	X, r24
    2326:	97 c0       	rjmp	.+302    	; 0x2456 <TIMERS_init+0x4be>
		else if (config_ptr->mode == CTC)
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	81 81       	ldd	r24, Z+1	; 0x01
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	09 f0       	breq	.+2      	; 0x2334 <TIMERS_init+0x39c>
    2332:	91 c0       	rjmp	.+290    	; 0x2456 <TIMERS_init+0x4be>
			SET_BIT(TIMSK,OCIE0);
    2334:	a9 e5       	ldi	r26, 0x59	; 89
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e9 e5       	ldi	r30, 0x59	; 89
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	82 60       	ori	r24, 0x02	; 2
    2340:	8c 93       	st	X, r24
    2342:	89 c0       	rjmp	.+274    	; 0x2456 <TIMERS_init+0x4be>
	}

	else if (config_ptr->num == TIMER2) {
    2344:	e9 81       	ldd	r30, Y+1	; 0x01
    2346:	fa 81       	ldd	r31, Y+2	; 0x02
    2348:	80 81       	ld	r24, Z
    234a:	84 30       	cpi	r24, 0x04	; 4
    234c:	09 f0       	breq	.+2      	; 0x2350 <TIMERS_init+0x3b8>
    234e:	83 c0       	rjmp	.+262    	; 0x2456 <TIMERS_init+0x4be>
		 * WGM21   = x		waveform generation mode
		 * CS22:0  = xxx	clock select
		 */

		/* set clock prescaler */
		TCCR2 = config_ptr->clock;
    2350:	a5 e4       	ldi	r26, 0x45	; 69
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e9 81       	ldd	r30, Y+1	; 0x01
    2356:	fa 81       	ldd	r31, Y+2	; 0x02
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	8c 93       	st	X, r24

		/* set waveform generation mode */
		if (config_ptr->mode == PWM_PHASE_CORRECT)
    235c:	e9 81       	ldd	r30, Y+1	; 0x01
    235e:	fa 81       	ldd	r31, Y+2	; 0x02
    2360:	81 81       	ldd	r24, Z+1	; 0x01
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	41 f4       	brne	.+16     	; 0x2376 <TIMERS_init+0x3de>
			SET_BIT(TCCR2,WGM20);
    2366:	a5 e4       	ldi	r26, 0x45	; 69
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e5 e4       	ldi	r30, 0x45	; 69
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	80 64       	ori	r24, 0x40	; 64
    2372:	8c 93       	st	X, r24
    2374:	19 c0       	rjmp	.+50     	; 0x23a8 <TIMERS_init+0x410>
		else if (config_ptr->mode == CTC)
    2376:	e9 81       	ldd	r30, Y+1	; 0x01
    2378:	fa 81       	ldd	r31, Y+2	; 0x02
    237a:	81 81       	ldd	r24, Z+1	; 0x01
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	41 f4       	brne	.+16     	; 0x2390 <TIMERS_init+0x3f8>
			SET_BIT(TCCR2,WGM21);
    2380:	a5 e4       	ldi	r26, 0x45	; 69
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e5 e4       	ldi	r30, 0x45	; 69
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	88 60       	ori	r24, 0x08	; 8
    238c:	8c 93       	st	X, r24
    238e:	0c c0       	rjmp	.+24     	; 0x23a8 <TIMERS_init+0x410>
		else if (config_ptr->mode == FAST_PWM)
    2390:	e9 81       	ldd	r30, Y+1	; 0x01
    2392:	fa 81       	ldd	r31, Y+2	; 0x02
    2394:	81 81       	ldd	r24, Z+1	; 0x01
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	39 f4       	brne	.+14     	; 0x23a8 <TIMERS_init+0x410>
			TCCR2 |= 0x48;
    239a:	a5 e4       	ldi	r26, 0x45	; 69
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e5 e4       	ldi	r30, 0x45	; 69
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	88 64       	ori	r24, 0x48	; 72
    23a6:	8c 93       	st	X, r24
		
		/* set compare match output mode */
		if (config_ptr->compare != DISCONNECT_OC) {
    23a8:	e9 81       	ldd	r30, Y+1	; 0x01
    23aa:	fa 81       	ldd	r31, Y+2	; 0x02
    23ac:	83 81       	ldd	r24, Z+3	; 0x03
    23ae:	88 23       	and	r24, r24
    23b0:	d1 f0       	breq	.+52     	; 0x23e6 <TIMERS_init+0x44e>
			TCCR2 |= (config_ptr->compare << 4);
    23b2:	a5 e4       	ldi	r26, 0x45	; 69
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e5 e4       	ldi	r30, 0x45	; 69
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	28 2f       	mov	r18, r24
    23be:	e9 81       	ldd	r30, Y+1	; 0x01
    23c0:	fa 81       	ldd	r31, Y+2	; 0x02
    23c2:	83 81       	ldd	r24, Z+3	; 0x03
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	82 95       	swap	r24
    23ca:	92 95       	swap	r25
    23cc:	90 7f       	andi	r25, 0xF0	; 240
    23ce:	98 27       	eor	r25, r24
    23d0:	80 7f       	andi	r24, 0xF0	; 240
    23d2:	98 27       	eor	r25, r24
    23d4:	82 2b       	or	r24, r18
    23d6:	8c 93       	st	X, r24
			SET_BIT(DDRD,PD7);			/* set pin OC2 (PD7) as output pin */
    23d8:	a1 e3       	ldi	r26, 0x31	; 49
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e1 e3       	ldi	r30, 0x31	; 49
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	80 68       	ori	r24, 0x80	; 128
    23e4:	8c 93       	st	X, r24
		}
		
		/* enable / disable force output compare */
		if (config_ptr->mode == NORMAL || config_ptr->mode == CTC)
    23e6:	e9 81       	ldd	r30, Y+1	; 0x01
    23e8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ea:	81 81       	ldd	r24, Z+1	; 0x01
    23ec:	88 23       	and	r24, r24
    23ee:	29 f0       	breq	.+10     	; 0x23fa <TIMERS_init+0x462>
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	81 81       	ldd	r24, Z+1	; 0x01
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	39 f4       	brne	.+14     	; 0x2408 <TIMERS_init+0x470>
			SET_BIT(TCCR2,FOC2);
    23fa:	a5 e4       	ldi	r26, 0x45	; 69
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e4       	ldi	r30, 0x45	; 69
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 68       	ori	r24, 0x80	; 128
    2406:	8c 93       	st	X, r24


		/* set initial value */
		TCNT2 = config_ptr->initial_value;
    2408:	a4 e4       	ldi	r26, 0x44	; 68
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	84 81       	ldd	r24, Z+4	; 0x04
    2412:	95 81       	ldd	r25, Z+5	; 0x05
    2414:	8c 93       	st	X, r24

		/* set compare value */
		OCR2 = config_ptr->compare_value;
    2416:	a3 e4       	ldi	r26, 0x43	; 67
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e9 81       	ldd	r30, Y+1	; 0x01
    241c:	fa 81       	ldd	r31, Y+2	; 0x02
    241e:	86 81       	ldd	r24, Z+6	; 0x06
    2420:	97 81       	ldd	r25, Z+7	; 0x07
    2422:	8c 93       	st	X, r24
		
		/* enable interrupt */
		if (config_ptr->mode == NORMAL)
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	81 81       	ldd	r24, Z+1	; 0x01
    242a:	88 23       	and	r24, r24
    242c:	41 f4       	brne	.+16     	; 0x243e <TIMERS_init+0x4a6>
			SET_BIT(TIMSK,TOIE2);
    242e:	a9 e5       	ldi	r26, 0x59	; 89
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e9 e5       	ldi	r30, 0x59	; 89
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	80 64       	ori	r24, 0x40	; 64
    243a:	8c 93       	st	X, r24
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <TIMERS_init+0x4be>
		else if (config_ptr->mode == CTC)
    243e:	e9 81       	ldd	r30, Y+1	; 0x01
    2440:	fa 81       	ldd	r31, Y+2	; 0x02
    2442:	81 81       	ldd	r24, Z+1	; 0x01
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	39 f4       	brne	.+14     	; 0x2456 <TIMERS_init+0x4be>
			SET_BIT(TIMSK,OCIE2);
    2448:	a9 e5       	ldi	r26, 0x59	; 89
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e9 e5       	ldi	r30, 0x59	; 89
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 68       	ori	r24, 0x80	; 128
    2454:	8c 93       	st	X, r24
	}
}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <TIMERS_setCallBack>:

void TIMERS_setCallBack(TIMERS_Num num, TIMERS_Mode mode, void (*f_ptr)(void)) {
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <TIMERS_setCallBack+0x6>
    2466:	00 d0       	rcall	.+0      	; 0x2468 <TIMERS_setCallBack+0x8>
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	6a 83       	std	Y+2, r22	; 0x02
    2470:	5c 83       	std	Y+4, r21	; 0x04
    2472:	4b 83       	std	Y+3, r20	; 0x03
	if (num == TIMER1)
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	39 f4       	brne	.+14     	; 0x2488 <TIMERS_setCallBack+0x28>
		g_timer1_overflow = f_ptr;
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	90 93 36 01 	sts	0x0136, r25
    2482:	80 93 35 01 	sts	0x0135, r24
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <TIMERS_setCallBack+0xa6>
	else if (num == TIMER1A)
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	39 f4       	brne	.+14     	; 0x249c <TIMERS_setCallBack+0x3c>
		g_timer1_compareA = f_ptr;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	90 93 38 01 	sts	0x0138, r25
    2496:	80 93 37 01 	sts	0x0137, r24
    249a:	35 c0       	rjmp	.+106    	; 0x2506 <TIMERS_setCallBack+0xa6>
	else if (num == TIMER1B)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	83 30       	cpi	r24, 0x03	; 3
    24a0:	39 f4       	brne	.+14     	; 0x24b0 <TIMERS_setCallBack+0x50>
		g_timer1_compareB = f_ptr;
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	90 93 3a 01 	sts	0x013A, r25
    24aa:	80 93 39 01 	sts	0x0139, r24
    24ae:	2b c0       	rjmp	.+86     	; 0x2506 <TIMERS_setCallBack+0xa6>
	
	else if (num == TIMER0) {
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	88 23       	and	r24, r24
    24b4:	99 f4       	brne	.+38     	; 0x24dc <TIMERS_setCallBack+0x7c>
		if (mode == NORMAL)
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	88 23       	and	r24, r24
    24ba:	31 f4       	brne	.+12     	; 0x24c8 <TIMERS_setCallBack+0x68>
			g_timer0_overflow = f_ptr;
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	90 93 32 01 	sts	0x0132, r25
    24c4:	80 93 31 01 	sts	0x0131, r24
		if (mode == CTC)
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	82 30       	cpi	r24, 0x02	; 2
    24cc:	e1 f4       	brne	.+56     	; 0x2506 <TIMERS_setCallBack+0xa6>
			g_timer0_compare = f_ptr;	
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	90 93 34 01 	sts	0x0134, r25
    24d6:	80 93 33 01 	sts	0x0133, r24
    24da:	15 c0       	rjmp	.+42     	; 0x2506 <TIMERS_setCallBack+0xa6>
	}

	else if (num == TIMER2) {
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	84 30       	cpi	r24, 0x04	; 4
    24e0:	91 f4       	brne	.+36     	; 0x2506 <TIMERS_setCallBack+0xa6>
		if (mode == NORMAL)
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	88 23       	and	r24, r24
    24e6:	31 f4       	brne	.+12     	; 0x24f4 <TIMERS_setCallBack+0x94>
			g_timer2_overflow = f_ptr;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	90 93 3c 01 	sts	0x013C, r25
    24f0:	80 93 3b 01 	sts	0x013B, r24
		if (mode == CTC)
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	31 f4       	brne	.+12     	; 0x2506 <TIMERS_setCallBack+0xa6>
			g_timer2_compare = f_ptr;	
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	90 93 3e 01 	sts	0x013E, r25
    2502:	80 93 3d 01 	sts	0x013D, r24
	}
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <TIMERS_deInit>:

void TIMERS_deInit(TIMERS_Num num){
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	0f 92       	push	r0
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	89 83       	std	Y+1, r24	; 0x01
	/* disable the clock to disable the timer */
	if (num == TIMER1 || num == TIMER1A || num == TIMER1B)
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	31 f0       	breq	.+12     	; 0x2532 <TIMERS_deInit+0x1e>
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	82 30       	cpi	r24, 0x02	; 2
    252a:	19 f0       	breq	.+6      	; 0x2532 <TIMERS_deInit+0x1e>
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	83 30       	cpi	r24, 0x03	; 3
    2530:	21 f4       	brne	.+8      	; 0x253a <TIMERS_deInit+0x26>
		TCCR1B = 0;
    2532:	ee e4       	ldi	r30, 0x4E	; 78
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	10 82       	st	Z, r1
    2538:	0d c0       	rjmp	.+26     	; 0x2554 <TIMERS_deInit+0x40>
	else if (num == TIMER0)
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	88 23       	and	r24, r24
    253e:	21 f4       	brne	.+8      	; 0x2548 <TIMERS_deInit+0x34>
		TCCR0 = 0;
    2540:	e3 e5       	ldi	r30, 0x53	; 83
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	10 82       	st	Z, r1
    2546:	06 c0       	rjmp	.+12     	; 0x2554 <TIMERS_deInit+0x40>
	else if (num == TIMER2)
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	84 30       	cpi	r24, 0x04	; 4
    254c:	19 f4       	brne	.+6      	; 0x2554 <TIMERS_deInit+0x40>
		TCCR2 = 0;
    254e:	e5 e4       	ldi	r30, 0x45	; 69
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	10 82       	st	Z, r1
}
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <UART_init>:
	#define BAUD_PRESCALE ((F_CPU / (USART_BAUDRATE * 16UL)) - 1)	
	#endif
#endif


void UART_init(const UART_ConfigType * const config_ptr) {
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <UART_init+0x6>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
	 * MPCM = 0			disable multi-processor communication mode
	 */

	/* select transmission speed */
	#ifdef UART_DOUBLE_SPEED
		UCSRA = (1<<U2X);
    256a:	eb e2       	ldi	r30, 0x2B	; 43
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	80 83       	st	Z, r24
	 * RXB8  = 0		disable 9-bit data mode
	 * TXB8  = 0		disable 9-bit data mode
	 */
	
	/* enable receiver and transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2572:	ea e2       	ldi	r30, 0x2A	; 42
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	88 e1       	ldi	r24, 0x18	; 24
    2578:	80 83       	st	Z, r24
	 * UCSZ1:0 = xx		number of data bits
	 * UCPOL   = x		UCPOL must be zero when using asynchronous mode
	 */

	/* write to UCSRC */
	UCSRC = (1<<URSEL);
    257a:	e0 e4       	ldi	r30, 0x40	; 64
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 e8       	ldi	r24, 0x80	; 128
    2580:	80 83       	st	Z, r24
	#ifndef ASYNC
		SET_BIT(UCSRC,UMSEL);
	#endif

	/* set parity mode */
	UCSRC = (UCSRC & 0xCF) | (config_ptr->parity << 4);
    2582:	a0 e4       	ldi	r26, 0x40	; 64
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e0 e4       	ldi	r30, 0x40	; 64
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	28 2f       	mov	r18, r24
    258e:	2f 7c       	andi	r18, 0xCF	; 207
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	81 81       	ldd	r24, Z+1	; 0x01
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	82 95       	swap	r24
    259c:	92 95       	swap	r25
    259e:	90 7f       	andi	r25, 0xF0	; 240
    25a0:	98 27       	eor	r25, r24
    25a2:	80 7f       	andi	r24, 0xF0	; 240
    25a4:	98 27       	eor	r25, r24
    25a6:	82 2b       	or	r24, r18
    25a8:	8c 93       	st	X, r24

	/* select stop bits number */
	if (config_ptr->stop)
    25aa:	e9 81       	ldd	r30, Y+1	; 0x01
    25ac:	fa 81       	ldd	r31, Y+2	; 0x02
    25ae:	80 81       	ld	r24, Z
    25b0:	88 23       	and	r24, r24
    25b2:	39 f0       	breq	.+14     	; 0x25c2 <UART_init+0x66>
		SET_BIT(UCSRC,USBS);
    25b4:	a0 e4       	ldi	r26, 0x40	; 64
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e0 e4       	ldi	r30, 0x40	; 64
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	88 60       	ori	r24, 0x08	; 8
    25c0:	8c 93       	st	X, r24

	/* set size of data bits */
	UCSRC = (UCSRC & 0xF9) | (config_ptr->size << 1);
    25c2:	a0 e4       	ldi	r26, 0x40	; 64
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e0 e4       	ldi	r30, 0x40	; 64
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	28 2f       	mov	r18, r24
    25ce:	29 7f       	andi	r18, 0xF9	; 249
    25d0:	e9 81       	ldd	r30, Y+1	; 0x01
    25d2:	fa 81       	ldd	r31, Y+2	; 0x02
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	82 2b       	or	r24, r18
    25e0:	8c 93       	st	X, r24
	#ifdef TX_FALLING_RX_RISING
		SET_BIT(UCSRC,UCPOL);
	#endif
	
	/* set the UBRR to select the Baud Rate */
	UBRRH = BAUD_PRESCALE >> 8;
    25e2:	e0 e4       	ldi	r30, 0x40	; 64
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    25e8:	e9 e2       	ldi	r30, 0x29	; 41
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	87 e6       	ldi	r24, 0x67	; 103
    25ee:	80 83       	st	Z, r24
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <UART_sendByte>:

void UART_sendByte(const uint8 data) {
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	0f 92       	push	r0
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2606:	eb e2       	ldi	r30, 0x2B	; 43
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	80 72       	andi	r24, 0x20	; 32
    2612:	90 70       	andi	r25, 0x00	; 0
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	b9 f3       	breq	.-18     	; 0x2606 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and also clear the UDRE flag
	 * as the UDR register is not empty now */
	UDR = data;
    2618:	ec e2       	ldi	r30, 0x2C	; 44
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	80 83       	st	Z, r24
	/* Another Slower Method
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC));		// Wait until the transimission is complete
	SET_BIT(UCSRA,TXC);					// Clear the TXC flag
	*/
}
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <UART_receiveByte>:

uint8 UART_receiveByte(void) {
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receives data */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2630:	eb e2       	ldi	r30, 0x2B	; 43
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	88 23       	and	r24, r24
    2638:	dc f7       	brge	.-10     	; 0x2630 <UART_receiveByte+0x8>
	/* Read the received data from the Rx buffer (UDR)
	 * the RXC flag will be cleared after reading UDR */
    return UDR;
    263a:	ec e2       	ldi	r30, 0x2C	; 44
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
}
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <UART_sendString>:

void UART_sendString(const uint8 *str) {
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <UART_sendString+0x6>
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	0a c0       	rjmp	.+20     	; 0x266a <UART_sendString+0x24>
	while(*str != '\0') {
		UART_sendByte(*str);
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	80 81       	ld	r24, Z
    265c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
		str++;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
	 * the RXC flag will be cleared after reading UDR */
    return UDR;
}

void UART_sendString(const uint8 *str) {
	while(*str != '\0') {
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	80 81       	ld	r24, Z
    2670:	88 23       	and	r24, r24
    2672:	89 f7       	brne	.-30     	; 0x2656 <UART_sendString+0x10>
		UART_sendByte(*str);
		str++;
	}
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <UART_receiveString>:

void UART_receiveString(uint8 *str) {
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <UART_receiveString+0xa>
    2688:	0f 92       	push	r0
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	9b 83       	std	Y+3, r25	; 0x03
    2690:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2692:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	8c 01       	movw	r16, r24
    26a0:	02 0f       	add	r16, r18
    26a2:	13 1f       	adc	r17, r19
    26a4:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
    26a8:	f8 01       	movw	r30, r16
    26aa:	80 83       	st	Z, r24
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <UART_receiveString+0x4e>
	while(str[i] != UART_TERMINATION_CHAR) {
		i++;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	8f 5f       	subi	r24, 0xFF	; 255
    26b2:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	8c 01       	movw	r16, r24
    26c0:	02 0f       	add	r16, r18
    26c2:	13 1f       	adc	r17, r19
    26c4:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_receiveByte>
    26c8:	f8 01       	movw	r30, r16
    26ca:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = UART_receiveByte();
	while(str[i] != UART_TERMINATION_CHAR) {
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	9b 81       	ldd	r25, Y+3	; 0x03
    26d6:	fc 01       	movw	r30, r24
    26d8:	e2 0f       	add	r30, r18
    26da:	f3 1f       	adc	r31, r19
    26dc:	80 81       	ld	r24, Z
    26de:	83 32       	cpi	r24, 0x23	; 35
    26e0:	31 f7       	brne	.-52     	; 0x26ae <UART_receiveString+0x30>
		i++;
		str[i] = UART_receiveByte();
	}
	str[i] = '\0';
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	fc 01       	movw	r30, r24
    26ee:	e2 0f       	add	r30, r18
    26f0:	f3 1f       	adc	r31, r19
    26f2:	10 82       	st	Z, r1
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	08 95       	ret

00002704 <__prologue_saves__>:
    2704:	2f 92       	push	r2
    2706:	3f 92       	push	r3
    2708:	4f 92       	push	r4
    270a:	5f 92       	push	r5
    270c:	6f 92       	push	r6
    270e:	7f 92       	push	r7
    2710:	8f 92       	push	r8
    2712:	9f 92       	push	r9
    2714:	af 92       	push	r10
    2716:	bf 92       	push	r11
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	ca 1b       	sub	r28, r26
    272e:	db 0b       	sbc	r29, r27
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	09 94       	ijmp

0000273c <__epilogue_restores__>:
    273c:	2a 88       	ldd	r2, Y+18	; 0x12
    273e:	39 88       	ldd	r3, Y+17	; 0x11
    2740:	48 88       	ldd	r4, Y+16	; 0x10
    2742:	5f 84       	ldd	r5, Y+15	; 0x0f
    2744:	6e 84       	ldd	r6, Y+14	; 0x0e
    2746:	7d 84       	ldd	r7, Y+13	; 0x0d
    2748:	8c 84       	ldd	r8, Y+12	; 0x0c
    274a:	9b 84       	ldd	r9, Y+11	; 0x0b
    274c:	aa 84       	ldd	r10, Y+10	; 0x0a
    274e:	b9 84       	ldd	r11, Y+9	; 0x09
    2750:	c8 84       	ldd	r12, Y+8	; 0x08
    2752:	df 80       	ldd	r13, Y+7	; 0x07
    2754:	ee 80       	ldd	r14, Y+6	; 0x06
    2756:	fd 80       	ldd	r15, Y+5	; 0x05
    2758:	0c 81       	ldd	r16, Y+4	; 0x04
    275a:	1b 81       	ldd	r17, Y+3	; 0x03
    275c:	aa 81       	ldd	r26, Y+2	; 0x02
    275e:	b9 81       	ldd	r27, Y+1	; 0x01
    2760:	ce 0f       	add	r28, r30
    2762:	d1 1d       	adc	r29, r1
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	ed 01       	movw	r28, r26
    2770:	08 95       	ret

00002772 <itoa>:
    2772:	fb 01       	movw	r30, r22
    2774:	9f 01       	movw	r18, r30
    2776:	e8 94       	clt
    2778:	42 30       	cpi	r20, 0x02	; 2
    277a:	c4 f0       	brlt	.+48     	; 0x27ac <itoa+0x3a>
    277c:	45 32       	cpi	r20, 0x25	; 37
    277e:	b4 f4       	brge	.+44     	; 0x27ac <itoa+0x3a>
    2780:	4a 30       	cpi	r20, 0x0A	; 10
    2782:	29 f4       	brne	.+10     	; 0x278e <itoa+0x1c>
    2784:	97 fb       	bst	r25, 7
    2786:	1e f4       	brtc	.+6      	; 0x278e <itoa+0x1c>
    2788:	90 95       	com	r25
    278a:	81 95       	neg	r24
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	64 2f       	mov	r22, r20
    2790:	77 27       	eor	r23, r23
    2792:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodhi4>
    2796:	80 5d       	subi	r24, 0xD0	; 208
    2798:	8a 33       	cpi	r24, 0x3A	; 58
    279a:	0c f0       	brlt	.+2      	; 0x279e <itoa+0x2c>
    279c:	89 5d       	subi	r24, 0xD9	; 217
    279e:	81 93       	st	Z+, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	a1 f7       	brne	.-24     	; 0x278e <itoa+0x1c>
    27a6:	16 f4       	brtc	.+4      	; 0x27ac <itoa+0x3a>
    27a8:	5d e2       	ldi	r21, 0x2D	; 45
    27aa:	51 93       	st	Z+, r21
    27ac:	10 82       	st	Z, r1
    27ae:	c9 01       	movw	r24, r18
    27b0:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <strrev>

000027b4 <strrev>:
    27b4:	dc 01       	movw	r26, r24
    27b6:	fc 01       	movw	r30, r24
    27b8:	67 2f       	mov	r22, r23
    27ba:	71 91       	ld	r23, Z+
    27bc:	77 23       	and	r23, r23
    27be:	e1 f7       	brne	.-8      	; 0x27b8 <strrev+0x4>
    27c0:	32 97       	sbiw	r30, 0x02	; 2
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <strrev+0x18>
    27c4:	7c 91       	ld	r23, X
    27c6:	6d 93       	st	X+, r22
    27c8:	70 83       	st	Z, r23
    27ca:	62 91       	ld	r22, -Z
    27cc:	ae 17       	cp	r26, r30
    27ce:	bf 07       	cpc	r27, r31
    27d0:	c8 f3       	brcs	.-14     	; 0x27c4 <strrev+0x10>
    27d2:	08 95       	ret

000027d4 <__udivmodhi4>:
    27d4:	aa 1b       	sub	r26, r26
    27d6:	bb 1b       	sub	r27, r27
    27d8:	51 e1       	ldi	r21, 0x11	; 17
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <__udivmodhi4_ep>

000027dc <__udivmodhi4_loop>:
    27dc:	aa 1f       	adc	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	a6 17       	cp	r26, r22
    27e2:	b7 07       	cpc	r27, r23
    27e4:	10 f0       	brcs	.+4      	; 0x27ea <__udivmodhi4_ep>
    27e6:	a6 1b       	sub	r26, r22
    27e8:	b7 0b       	sbc	r27, r23

000027ea <__udivmodhi4_ep>:
    27ea:	88 1f       	adc	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	5a 95       	dec	r21
    27f0:	a9 f7       	brne	.-22     	; 0x27dc <__udivmodhi4_loop>
    27f2:	80 95       	com	r24
    27f4:	90 95       	com	r25
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	08 95       	ret

000027fc <_exit>:
    27fc:	f8 94       	cli

000027fe <__stop_program>:
    27fe:	ff cf       	rjmp	.-2      	; 0x27fe <__stop_program>
